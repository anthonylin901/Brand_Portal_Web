import {
  require_axios
} from "./chunk-6FXYSO2M.js";
import {
  __toESM
} from "./chunk-TWLJ45QX.js";

// node_modules/hylink-auth-user-api-client/egg/api.js
var import_axios2 = __toESM(require_axios(), 1);

// node_modules/hylink-auth-user-api-client/egg/base.js
var import_axios = __toESM(require_axios(), 1);
var BASE_PATH = "http://localhost".replace(/\/+$/, "");
var BaseAPI = class {
  constructor(configuration, basePath = BASE_PATH, axios = import_axios.default) {
    this.basePath = basePath;
    this.axios = axios;
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
};
var RequiredError = class extends Error {
  constructor(field, msg) {
    super(msg);
    this.field = field;
    this.name = "RequiredError";
  }
};

// node_modules/hylink-auth-user-api-client/egg/common.js
var DUMMY_BASE_URL = "https://example.com";
var assertParamExists = function(functionName, paramName, paramValue) {
  if (paramValue === null || paramValue === void 0) {
    throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);
  }
};
var setApiKeyToObject = async function(object, keyParamName, configuration) {
  if (configuration && configuration.apiKey) {
    const localVarApiKeyValue = typeof configuration.apiKey === "function" ? await configuration.apiKey(keyParamName) : await configuration.apiKey;
    object[keyParamName] = localVarApiKeyValue;
  }
};
var setSearchParams = function(url, ...objects) {
  const searchParams = new URLSearchParams(url.search);
  for (const object of objects) {
    for (const key in object) {
      if (Array.isArray(object[key])) {
        searchParams.delete(key);
        for (const item of object[key]) {
          searchParams.append(key, item);
        }
      } else {
        searchParams.set(key, object[key]);
      }
    }
  }
  url.search = searchParams.toString();
};
var serializeDataIfNeeded = function(value, requestOptions, configuration) {
  const nonString = typeof value !== "string";
  const needsSerialization = nonString && configuration && configuration.isJsonMime ? configuration.isJsonMime(requestOptions.headers["Content-Type"]) : nonString;
  return needsSerialization ? JSON.stringify(value !== void 0 ? value : {}) : value || "";
};
var toPathString = function(url) {
  return url.pathname + url.search + url.hash;
};
var createRequestFunction = function(axiosArgs, globalAxios3, BASE_PATH2, configuration) {
  return (axios = globalAxios3, basePath = BASE_PATH2) => {
    const axiosRequestArgs = { ...axiosArgs.options, url: ((configuration == null ? void 0 : configuration.basePath) || basePath) + axiosArgs.url };
    return axios.request(axiosRequestArgs);
  };
};

// node_modules/hylink-auth-user-api-client/egg/api.js
var Status = {
  Enabled: "enabled",
  Disabled: "disabled"
};
var UserApiAxiosParamCreator = function(configuration) {
  return {
    changePassword: async (changePasswordRequest, options = {}) => {
      assertParamExists("changePassword", "changePasswordRequest", changePasswordRequest);
      const localVarPath = `/user/change_password`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(changePasswordRequest, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    confirmForgotPassword: async (confirmForgotPasswordRequest, options = {}) => {
      assertParamExists("confirmForgotPassword", "confirmForgotPasswordRequest", confirmForgotPasswordRequest);
      const localVarPath = `/user/confirm_forgot_password`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(confirmForgotPasswordRequest, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    forgotPassword: async (forgotPasswordRequest, options = {}) => {
      assertParamExists("forgotPassword", "forgotPasswordRequest", forgotPasswordRequest);
      const localVarPath = `/user/forgot_password`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordRequest, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getPermissions: async (platform, options = {}) => {
      assertParamExists("getPermissions", "platform", platform);
      const localVarPath = `/user/permission`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
      if (platform !== void 0) {
        localVarQueryParameter["platform"] = platform;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getUser: async (options = {}) => {
      const localVarPath = `/user/detail`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    login: async (loginRequest, options = {}) => {
      assertParamExists("login", "loginRequest", loginRequest);
      const localVarPath = `/user/login`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    refreshToken: async (refreshTokenRequest, options = {}) => {
      assertParamExists("refreshToken", "refreshTokenRequest", refreshTokenRequest);
      const localVarPath = `/user/refresh_token`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenRequest, localVarRequestOptions, configuration);
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    verifyToken: async (options = {}) => {
      const localVarPath = `/user/verify_token`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
var UserApiFp = function(configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
  return {
    async changePassword(changePasswordRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(changePasswordRequest, options);
      return createRequestFunction(localVarAxiosArgs, import_axios2.default, BASE_PATH, configuration);
    },
    async confirmForgotPassword(confirmForgotPasswordRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.confirmForgotPassword(confirmForgotPasswordRequest, options);
      return createRequestFunction(localVarAxiosArgs, import_axios2.default, BASE_PATH, configuration);
    },
    async forgotPassword(forgotPasswordRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.forgotPassword(forgotPasswordRequest, options);
      return createRequestFunction(localVarAxiosArgs, import_axios2.default, BASE_PATH, configuration);
    },
    async getPermissions(platform, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPermissions(platform, options);
      return createRequestFunction(localVarAxiosArgs, import_axios2.default, BASE_PATH, configuration);
    },
    async getUser(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(options);
      return createRequestFunction(localVarAxiosArgs, import_axios2.default, BASE_PATH, configuration);
    },
    async login(loginRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequest, options);
      return createRequestFunction(localVarAxiosArgs, import_axios2.default, BASE_PATH, configuration);
    },
    async refreshToken(refreshTokenRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(refreshTokenRequest, options);
      return createRequestFunction(localVarAxiosArgs, import_axios2.default, BASE_PATH, configuration);
    },
    async verifyToken(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.verifyToken(options);
      return createRequestFunction(localVarAxiosArgs, import_axios2.default, BASE_PATH, configuration);
    }
  };
};
var UserApiFactory = function(configuration, basePath, axios) {
  const localVarFp = UserApiFp(configuration);
  return {
    changePassword(changePasswordRequest, options) {
      return localVarFp.changePassword(changePasswordRequest, options).then((request) => request(axios, basePath));
    },
    confirmForgotPassword(confirmForgotPasswordRequest, options) {
      return localVarFp.confirmForgotPassword(confirmForgotPasswordRequest, options).then((request) => request(axios, basePath));
    },
    forgotPassword(forgotPasswordRequest, options) {
      return localVarFp.forgotPassword(forgotPasswordRequest, options).then((request) => request(axios, basePath));
    },
    getPermissions(platform, options) {
      return localVarFp.getPermissions(platform, options).then((request) => request(axios, basePath));
    },
    getUser(options) {
      return localVarFp.getUser(options).then((request) => request(axios, basePath));
    },
    login(loginRequest, options) {
      return localVarFp.login(loginRequest, options).then((request) => request(axios, basePath));
    },
    refreshToken(refreshTokenRequest, options) {
      return localVarFp.refreshToken(refreshTokenRequest, options).then((request) => request(axios, basePath));
    },
    verifyToken(options) {
      return localVarFp.verifyToken(options).then((request) => request(axios, basePath));
    }
  };
};
var UserApi = class extends BaseAPI {
  changePassword(changePasswordRequest, options) {
    return UserApiFp(this.configuration).changePassword(changePasswordRequest, options).then((request) => request(this.axios, this.basePath));
  }
  confirmForgotPassword(confirmForgotPasswordRequest, options) {
    return UserApiFp(this.configuration).confirmForgotPassword(confirmForgotPasswordRequest, options).then((request) => request(this.axios, this.basePath));
  }
  forgotPassword(forgotPasswordRequest, options) {
    return UserApiFp(this.configuration).forgotPassword(forgotPasswordRequest, options).then((request) => request(this.axios, this.basePath));
  }
  getPermissions(platform, options) {
    return UserApiFp(this.configuration).getPermissions(platform, options).then((request) => request(this.axios, this.basePath));
  }
  getUser(options) {
    return UserApiFp(this.configuration).getUser(options).then((request) => request(this.axios, this.basePath));
  }
  login(loginRequest, options) {
    return UserApiFp(this.configuration).login(loginRequest, options).then((request) => request(this.axios, this.basePath));
  }
  refreshToken(refreshTokenRequest, options) {
    return UserApiFp(this.configuration).refreshToken(refreshTokenRequest, options).then((request) => request(this.axios, this.basePath));
  }
  verifyToken(options) {
    return UserApiFp(this.configuration).verifyToken(options).then((request) => request(this.axios, this.basePath));
  }
};

// node_modules/hylink-auth-user-api-client/egg/configuration.js
var Configuration = class {
  constructor(param = {}) {
    this.apiKey = param.apiKey;
    this.username = param.username;
    this.password = param.password;
    this.accessToken = param.accessToken;
    this.basePath = param.basePath;
    this.baseOptions = param.baseOptions;
    this.formDataCtor = param.formDataCtor;
  }
  isJsonMime(mime) {
    const jsonMime = new RegExp("^(application/json|[^;/ 	]+/[^;/ 	]+[+]json)[ 	]*(;.*)?$", "i");
    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === "application/json-patch+json");
  }
};
export {
  Configuration,
  Status,
  UserApi,
  UserApiAxiosParamCreator,
  UserApiFactory,
  UserApiFp
};
//# sourceMappingURL=hylink-auth-user-api-client.js.map
