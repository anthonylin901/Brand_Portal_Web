{
  "version": 3,
  "sources": ["../../hylink-auth-user-api-client/egg/api.js", "../../hylink-auth-user-api-client/egg/base.js", "../../hylink-auth-user-api-client/egg/common.js", "../../hylink-auth-user-api-client/egg/configuration.js"],
  "sourcesContent": ["/* tslint:disable */\n/* eslint-disable */\n/**\n * Authorizer\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.4.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, BaseAPI } from './base';\n/**\n * An enumeration.\n * @export\n * @enum {string}\n */\nexport const Status = {\n    Enabled: 'enabled',\n    Disabled: 'disabled'\n};\n/**\n * UserApi - axios parameter creator\n * @export\n */\nexport const UserApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Change Password\n         * @param {ChangePasswordRequest} changePasswordRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        changePassword: async (changePasswordRequest, options = {}) => {\n            // verify required parameter 'changePasswordRequest' is not null or undefined\n            assertParamExists('changePassword', 'changePasswordRequest', changePasswordRequest);\n            const localVarPath = `/user/change_password`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Confirm Forgot Password\n         * @param {ConfirmForgotPasswordRequest} confirmForgotPasswordRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        confirmForgotPassword: async (confirmForgotPasswordRequest, options = {}) => {\n            // verify required parameter 'confirmForgotPasswordRequest' is not null or undefined\n            assertParamExists('confirmForgotPassword', 'confirmForgotPasswordRequest', confirmForgotPasswordRequest);\n            const localVarPath = `/user/confirm_forgot_password`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = serializeDataIfNeeded(confirmForgotPasswordRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Forgot Password\n         * @param {ForgotPasswordRequest} forgotPasswordRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        forgotPassword: async (forgotPasswordRequest, options = {}) => {\n            // verify required parameter 'forgotPasswordRequest' is not null or undefined\n            assertParamExists('forgotPassword', 'forgotPasswordRequest', forgotPasswordRequest);\n            const localVarPath = `/user/forgot_password`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Get Permissions\n         * @param {string} platform\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPermissions: async (platform, options = {}) => {\n            // verify required parameter 'platform' is not null or undefined\n            assertParamExists('getPermissions', 'platform', platform);\n            const localVarPath = `/user/permission`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Authorization required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration);\n            if (platform !== undefined) {\n                localVarQueryParameter['platform'] = platform;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Get User\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUser: async (options = {}) => {\n            const localVarPath = `/user/detail`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Authorization required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration);\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Login\n         * @param {LoginRequest} loginRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login: async (loginRequest, options = {}) => {\n            // verify required parameter 'loginRequest' is not null or undefined\n            assertParamExists('login', 'loginRequest', loginRequest);\n            const localVarPath = `/user/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Refresh Token\n         * @param {RefreshTokenRequest} refreshTokenRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refreshToken: async (refreshTokenRequest, options = {}) => {\n            // verify required parameter 'refreshTokenRequest' is not null or undefined\n            assertParamExists('refreshToken', 'refreshTokenRequest', refreshTokenRequest);\n            const localVarPath = `/user/refresh_token`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Verify Token\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verifyToken: async (options = {}) => {\n            const localVarPath = `/user/verify_token`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication Authorization required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration);\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * UserApi - functional programming interface\n * @export\n */\nexport const UserApiFp = function (configuration) {\n    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);\n    return {\n        /**\n         *\n         * @summary Change Password\n         * @param {ChangePasswordRequest} changePasswordRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async changePassword(changePasswordRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(changePasswordRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         *\n         * @summary Confirm Forgot Password\n         * @param {ConfirmForgotPasswordRequest} confirmForgotPasswordRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async confirmForgotPassword(confirmForgotPasswordRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmForgotPassword(confirmForgotPasswordRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         *\n         * @summary Forgot Password\n         * @param {ForgotPasswordRequest} forgotPasswordRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async forgotPassword(forgotPasswordRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.forgotPassword(forgotPasswordRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         *\n         * @summary Get Permissions\n         * @param {string} platform\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getPermissions(platform, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getPermissions(platform, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         *\n         * @summary Get User\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getUser(options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         *\n         * @summary Login\n         * @param {LoginRequest} loginRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async login(loginRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         *\n         * @summary Refresh Token\n         * @param {RefreshTokenRequest} refreshTokenRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async refreshToken(refreshTokenRequest, options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(refreshTokenRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         *\n         * @summary Verify Token\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async verifyToken(options) {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyToken(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    };\n};\n/**\n * UserApi - factory interface\n * @export\n */\nexport const UserApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = UserApiFp(configuration);\n    return {\n        /**\n         *\n         * @summary Change Password\n         * @param {ChangePasswordRequest} changePasswordRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        changePassword(changePasswordRequest, options) {\n            return localVarFp.changePassword(changePasswordRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Confirm Forgot Password\n         * @param {ConfirmForgotPasswordRequest} confirmForgotPasswordRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        confirmForgotPassword(confirmForgotPasswordRequest, options) {\n            return localVarFp.confirmForgotPassword(confirmForgotPasswordRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Forgot Password\n         * @param {ForgotPasswordRequest} forgotPasswordRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        forgotPassword(forgotPasswordRequest, options) {\n            return localVarFp.forgotPassword(forgotPasswordRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Get Permissions\n         * @param {string} platform\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPermissions(platform, options) {\n            return localVarFp.getPermissions(platform, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Get User\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUser(options) {\n            return localVarFp.getUser(options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Login\n         * @param {LoginRequest} loginRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginRequest, options) {\n            return localVarFp.login(loginRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Refresh Token\n         * @param {RefreshTokenRequest} refreshTokenRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refreshToken(refreshTokenRequest, options) {\n            return localVarFp.refreshToken(refreshTokenRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Verify Token\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verifyToken(options) {\n            return localVarFp.verifyToken(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n/**\n * UserApi - object-oriented interface\n * @export\n * @class UserApi\n * @extends {BaseAPI}\n */\nexport class UserApi extends BaseAPI {\n    /**\n     *\n     * @summary Change Password\n     * @param {ChangePasswordRequest} changePasswordRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    changePassword(changePasswordRequest, options) {\n        return UserApiFp(this.configuration).changePassword(changePasswordRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Confirm Forgot Password\n     * @param {ConfirmForgotPasswordRequest} confirmForgotPasswordRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    confirmForgotPassword(confirmForgotPasswordRequest, options) {\n        return UserApiFp(this.configuration).confirmForgotPassword(confirmForgotPasswordRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Forgot Password\n     * @param {ForgotPasswordRequest} forgotPasswordRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    forgotPassword(forgotPasswordRequest, options) {\n        return UserApiFp(this.configuration).forgotPassword(forgotPasswordRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Get Permissions\n     * @param {string} platform\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    getPermissions(platform, options) {\n        return UserApiFp(this.configuration).getPermissions(platform, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Get User\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    getUser(options) {\n        return UserApiFp(this.configuration).getUser(options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Login\n     * @param {LoginRequest} loginRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    login(loginRequest, options) {\n        return UserApiFp(this.configuration).login(loginRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Refresh Token\n     * @param {RefreshTokenRequest} refreshTokenRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    refreshToken(refreshTokenRequest, options) {\n        return UserApiFp(this.configuration).refreshToken(refreshTokenRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Verify Token\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    verifyToken(options) {\n        return UserApiFp(this.configuration).verifyToken(options).then((request) => request(this.axios, this.basePath));\n    }\n}\n", "/* tslint:disable */\n/* eslint-disable */\n/**\n * Authorizer\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.4.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios from 'axios';\nexport const BASE_PATH = \"http://localhost\".replace(/\\/+$/, \"\");\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    constructor(configuration, basePath = BASE_PATH, axios = globalAxios) {\n        this.basePath = basePath;\n        this.axios = axios;\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n}\n;\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    constructor(field, msg) {\n        super(msg);\n        this.field = field;\n        this.name = \"RequiredError\";\n    }\n}\n", "/* tslint:disable */\n/* eslint-disable */\n/**\n * Authorizer\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.4.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { RequiredError } from \"./base\";\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com';\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName, paramName, paramValue) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n};\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object, keyParamName, configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n};\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object, configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n};\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object, configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n};\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object, name, scopes, configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n};\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url, ...objects) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            }\n            else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n};\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value, requestOptions, configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n};\n/**\n *\n * @export\n */\nexport const toPathString = function (url) {\n    return url.pathname + url.search + url.hash;\n};\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs, globalAxios, BASE_PATH, configuration) {\n    return (axios = globalAxios, basePath = BASE_PATH) => {\n        const axiosRequestArgs = { ...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url };\n        return axios.request(axiosRequestArgs);\n    };\n};\n", "/* tslint:disable */\n/* eslint-disable */\n/**\n * Authorizer\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.4.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nexport class Configuration {\n    constructor(param = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    isJsonMime(mime) {\n        const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n"],
  "mappings": "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",
  "names": ["import_axios", "globalAxios", "globalAxios", "BASE_PATH", "globalAxios"]
}
