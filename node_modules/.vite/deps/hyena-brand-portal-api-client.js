import {
  require_axios
} from "./chunk-6FXYSO2M.js";
import {
  __commonJS
} from "./chunk-TWLJ45QX.js";

// node_modules/hyena-brand-portal-api-client/egg/base.js
var require_base = __commonJS({
  "node_modules/hyena-brand-portal-api-client/egg/base.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.operationServerMap = exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = exports.BASE_PATH = void 0;
    var axios_1 = __importDefault(require_axios());
    exports.BASE_PATH = "http://localhost".replace(/\/+$/, "");
    exports.COLLECTION_FORMATS = {
      csv: ",",
      ssv: " ",
      tsv: "	",
      pipes: "|"
    };
    var BaseAPI = class {
      constructor(configuration, basePath = exports.BASE_PATH, axios = axios_1.default) {
        var _a;
        this.basePath = basePath;
        this.axios = axios;
        if (configuration) {
          this.configuration = configuration;
          this.basePath = (_a = configuration.basePath) != null ? _a : basePath;
        }
      }
    };
    exports.BaseAPI = BaseAPI;
    var RequiredError = class extends Error {
      constructor(field, msg) {
        super(msg);
        this.field = field;
        this.name = "RequiredError";
      }
    };
    exports.RequiredError = RequiredError;
    exports.operationServerMap = {};
  }
});

// node_modules/hyena-brand-portal-api-client/egg/common.js
var require_common = __commonJS({
  "node_modules/hyena-brand-portal-api-client/egg/common.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createRequestFunction = exports.toPathString = exports.serializeDataIfNeeded = exports.setSearchParams = exports.setOAuthToObject = exports.setBearerAuthToObject = exports.setBasicAuthToObject = exports.setApiKeyToObject = exports.assertParamExists = exports.DUMMY_BASE_URL = void 0;
    var base_1 = require_base();
    exports.DUMMY_BASE_URL = "https://example.com";
    var assertParamExists = function(functionName, paramName, paramValue) {
      if (paramValue === null || paramValue === void 0) {
        throw new base_1.RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);
      }
    };
    exports.assertParamExists = assertParamExists;
    var setApiKeyToObject = async function(object, keyParamName, configuration) {
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === "function" ? await configuration.apiKey(keyParamName) : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
      }
    };
    exports.setApiKeyToObject = setApiKeyToObject;
    var setBasicAuthToObject = function(object, configuration) {
      if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = { username: configuration.username, password: configuration.password };
      }
    };
    exports.setBasicAuthToObject = setBasicAuthToObject;
    var setBearerAuthToObject = async function(object, configuration) {
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === "function" ? await configuration.accessToken() : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
      }
    };
    exports.setBearerAuthToObject = setBearerAuthToObject;
    var setOAuthToObject = async function(object, name, scopes, configuration) {
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === "function" ? await configuration.accessToken(name, scopes) : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
      }
    };
    exports.setOAuthToObject = setOAuthToObject;
    function setFlattenedQueryParams(urlSearchParams, parameter, key = "") {
      if (parameter == null)
        return;
      if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
          parameter.forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));
        } else {
          Object.keys(parameter).forEach((currentKey) => setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== "" ? "." : ""}${currentKey}`));
        }
      } else {
        if (urlSearchParams.has(key)) {
          urlSearchParams.append(key, parameter);
        } else {
          urlSearchParams.set(key, parameter);
        }
      }
    }
    var setSearchParams = function(url, ...objects) {
      const searchParams = new URLSearchParams(url.search);
      setFlattenedQueryParams(searchParams, objects);
      url.search = searchParams.toString();
    };
    exports.setSearchParams = setSearchParams;
    var serializeDataIfNeeded = function(value, requestOptions, configuration) {
      const nonString = typeof value !== "string";
      const needsSerialization = nonString && configuration && configuration.isJsonMime ? configuration.isJsonMime(requestOptions.headers["Content-Type"]) : nonString;
      return needsSerialization ? JSON.stringify(value !== void 0 ? value : {}) : value || "";
    };
    exports.serializeDataIfNeeded = serializeDataIfNeeded;
    var toPathString = function(url) {
      return url.pathname + url.search + url.hash;
    };
    exports.toPathString = toPathString;
    var createRequestFunction = function(axiosArgs, globalAxios, BASE_PATH, configuration) {
      return (axios = globalAxios, basePath = BASE_PATH) => {
        var _a;
        const axiosRequestArgs = { ...axiosArgs.options, url: (axios.defaults.baseURL ? "" : (_a = configuration == null ? void 0 : configuration.basePath) != null ? _a : basePath) + axiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    };
    exports.createRequestFunction = createRequestFunction;
  }
});

// node_modules/hyena-brand-portal-api-client/egg/api.js
var require_api = __commonJS({
  "node_modules/hyena-brand-portal-api-client/egg/api.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PostBundleApiFactory = exports.PostBundleApiFp = exports.PostBundleApiAxiosParamCreator = exports.InstructionApi = exports.InstructionApiFactory = exports.InstructionApiFp = exports.InstructionApiAxiosParamCreator = exports.EnumerationApi = exports.EnumerationApiFactory = exports.EnumerationApiFp = exports.EnumerationApiAxiosParamCreator = exports.DealerSupportHubApi = exports.DealerSupportHubApiFactory = exports.DealerSupportHubApiFp = exports.DealerSupportHubApiAxiosParamCreator = exports.CaseManagementApi = exports.CaseManagementApiFactory = exports.CaseManagementApiFp = exports.CaseManagementApiAxiosParamCreator = exports.BikeSpecApi = exports.BikeSpecApiFactory = exports.BikeSpecApiFp = exports.BikeSpecApiAxiosParamCreator = exports.BikeApi = exports.BikeApiFactory = exports.BikeApiFp = exports.BikeApiAxiosParamCreator = exports.AuthApi = exports.AuthApiFactory = exports.AuthApiFp = exports.AuthApiAxiosParamCreator = exports.UnitOfLengthOption = exports.TaskRule = exports.Status = exports.SpeedLimitOption = exports.ReporterRole = exports.ReportedSystem = exports.ReportedOrganizationEnum = exports.ReplacementPartType = exports.PartType = exports.LanguageCode = exports.InstructionPartType = exports.DealerSupportHubStatus = exports.DealerCase = exports.CommunicationProtocol = exports.CaseType = exports.CaseManagementStatus = exports.BundlePartType = exports.AdditionalBundlePartType = exports.ActivityHistoryName = void 0;
    exports.ZendeskApi = exports.ZendeskApiFactory = exports.ZendeskApiFp = exports.ZendeskApiAxiosParamCreator = exports.PostBundleApi = void 0;
    var axios_1 = __importDefault(require_axios());
    var common_1 = require_common();
    var base_1 = require_base();
    exports.ActivityHistoryName = {
      PartReplacement: "part_replacement",
      BootloaderRescued: "bootloader_rescued",
      MidParameterUpdate: "mid_parameter_update",
      FirmwareUpdate: "firmware_update",
      ErrorCodeResolved: "error_code_resolved",
      ParameterUpdate: "parameter_update",
      DiagnosisResolved: "diagnosis_resolved",
      ParameterCompare: "parameter_compare",
      BikeActivate: "bike_activate",
      BikeDiagnosis: "bike_diagnosis",
      BikeConnected: "bike_connected"
    };
    exports.AdditionalBundlePartType = {
      FrontLight: "front_light",
      RearLight: "rear_light"
    };
    exports.BundlePartType = {
      Hmi: "hmi",
      Display: "display",
      Controller: "controller",
      Battery: "battery",
      Motor: "motor",
      CenterMotor: "center_motor",
      Torque: "torque",
      Derailleur: "derailleur",
      Throttle: "throttle",
      Charger: "charger",
      RangeExtenderBattery: "range_extender_battery",
      Cadence: "cadence",
      FrontLight: "front_light",
      RearLight: "rear_light"
    };
    exports.CaseManagementStatus = {
      ToDo: "To-do",
      Processing: "Processing",
      Approved: "Approved",
      Completed: "Completed",
      Rejected: "Rejected"
    };
    exports.CaseType = {
      PostBundle: "post_bundle",
      VerifyWorkspace: "verify_workspace"
    };
    exports.CommunicationProtocol = {
      Hap1: "hap1",
      Hap2: "hap2",
      NoCommunication: "no_communication",
      Uart: "uart",
      Other: "other"
    };
    exports.DealerCase = {
      PostBundle: "post_bundle"
    };
    exports.DealerSupportHubStatus = {
      ToDo: "to_do",
      Processing: "processing",
      Approved: "approved",
      Completed: "completed",
      Revised: "revised",
      Rejected: "rejected"
    };
    exports.InstructionPartType = {
      Brose: "brose",
      Battery: "battery",
      Chain: "chain",
      Console: "console",
      Controller: "controller",
      Driver: "driver",
      Display: "display",
      FrontLight: "front_light",
      Hmi: "hmi",
      Light: "light",
      Misc: "misc",
      Motor: "motor",
      RearLight: "rear_light",
      SpeedSensor: "speed_sensor",
      Speed: "speed",
      Torque: "torque",
      Throttle: "throttle"
    };
    exports.LanguageCode = {
      ZhTw: "zh-tw",
      EnUs: "en-us",
      De: "de",
      Fr: "fr",
      Es: "es",
      It: "it",
      Nl: "nl"
    };
    exports.PartType = {
      Hmi: "hmi",
      Battery: "battery",
      Motor: "motor",
      Controller: "controller",
      Dongle: "dongle",
      Torque: "torque",
      Throttle: "throttle",
      Lock: "lock",
      Display: "display",
      FrontLight: "front_light",
      RearLight: "rear_light",
      Derailleur: "derailleur",
      Cadence: "cadence",
      Charger: "charger",
      RangeExtenderBattery: "range_extender_battery",
      SpeedSensor: "speed_sensor",
      MotorCore: "motor_core",
      MidMotor: "mid_motor"
    };
    exports.ReplacementPartType = {
      Hmi: "hmi",
      Battery: "battery",
      Motor: "motor",
      Controller: "controller",
      Dongle: "dongle",
      Torque: "torque",
      Throttle: "throttle",
      Lock: "lock",
      Display: "display",
      FrontLight: "front_light",
      RearLight: "rear_light",
      Derailleur: "derailleur",
      Cadence: "cadence",
      Charger: "charger",
      Speed: "speed",
      RangeExtenderBattery: "range_extender_battery"
    };
    exports.ReportedOrganizationEnum = {
      Brand: "BRAND",
      ServiceCenter: "SERVICE_CENTER",
      BikeShop: "BIKE_SHOP"
    };
    exports.ReportedSystem = {
      Hst: "HST",
      HstV3: "HST_V3",
      Hra: "HRA"
    };
    exports.ReporterRole = {
      Dealer: "dealer",
      ServiceCenter: "service_center"
    };
    exports.SpeedLimitOption = {
      _24: "KM_24",
      _25: "KM_25",
      _245Full: "KM_24_5_FULL",
      _25Full: "KM_25_FULL",
      _29Full: "KM_29_FULL",
      _32: "KM_32",
      _45: "KM_45"
    };
    exports.Status = {
      Enabled: "enabled",
      Disabled: "disabled",
      Unconfirmed: "unconfirmed"
    };
    exports.TaskRule = {
      PartBundleNotMatch: "part_bundle_not_match",
      PartBundleNotFound: "part_bundle_not_found",
      MidNotFound: "mid_not_found",
      IllegalMid: "illegal_mid",
      VinNotFound: "vin_not_found",
      FirmwareUpdateAvailable: "firmware_update_available",
      InBootloader: "in_bootloader",
      ErrorCodeDanger: "error_code_danger",
      ErrorCodeWarning: "error_code_warning",
      ParameterNeedCompare: "parameter_need_compare",
      ParameterNeedUpdate: "parameter_need_update",
      MeasurementSpeedError: "measurement_speed_error",
      PedalTorqueError: "pedal_torque_error",
      PedalRpmError: "pedal_rpm_error",
      BundleRuleNotMatch: "bundle_rule_not_match",
      HmiNeedDiagnosis: "hmi_need_diagnosis"
    };
    exports.UnitOfLengthOption = {
      Km: "KM",
      Mi: "MI"
    };
    var AuthApiAxiosParamCreator = function(configuration) {
      return {
        getInvitableBrands: async (options = {}) => {
          const localVarPath = `/auth/brand/invitable`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        inviteDealerAccount: async (inviteAccountRequest, options = {}) => {
          (0, common_1.assertParamExists)("inviteDealerAccount", "inviteAccountRequest", inviteAccountRequest);
          const localVarPath = `/auth/invite`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(inviteAccountRequest, localVarRequestOptions, configuration);
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        queryDealerAccountOverview: async (page, pageSize, username, brandIds, status, options = {}) => {
          const localVarPath = `/auth/`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          if (page !== void 0) {
            localVarQueryParameter["page"] = page;
          }
          if (pageSize !== void 0) {
            localVarQueryParameter["page_size"] = pageSize;
          }
          if (username !== void 0) {
            localVarQueryParameter["username"] = username;
          }
          if (brandIds) {
            localVarQueryParameter["brand_ids"] = brandIds;
          }
          if (status !== void 0) {
            localVarQueryParameter["status"] = status;
          }
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        resendTemporaryPassword: async (bodyResendTemporaryPasswordAuthTemporaryPasswordPost, options = {}) => {
          (0, common_1.assertParamExists)("resendTemporaryPassword", "bodyResendTemporaryPasswordAuthTemporaryPasswordPost", bodyResendTemporaryPasswordAuthTemporaryPasswordPost);
          const localVarPath = `/auth/temporary_password`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(bodyResendTemporaryPasswordAuthTemporaryPasswordPost, localVarRequestOptions, configuration);
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        }
      };
    };
    exports.AuthApiAxiosParamCreator = AuthApiAxiosParamCreator;
    var AuthApiFp = function(configuration) {
      const localVarAxiosParamCreator = (0, exports.AuthApiAxiosParamCreator)(configuration);
      return {
        async getInvitableBrands(options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getInvitableBrands(options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["AuthApi.getInvitableBrands"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async inviteDealerAccount(inviteAccountRequest, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.inviteDealerAccount(inviteAccountRequest, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["AuthApi.inviteDealerAccount"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async queryDealerAccountOverview(page, pageSize, username, brandIds, status, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.queryDealerAccountOverview(page, pageSize, username, brandIds, status, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["AuthApi.queryDealerAccountOverview"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async resendTemporaryPassword(bodyResendTemporaryPasswordAuthTemporaryPasswordPost, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.resendTemporaryPassword(bodyResendTemporaryPasswordAuthTemporaryPasswordPost, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["AuthApi.resendTemporaryPassword"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        }
      };
    };
    exports.AuthApiFp = AuthApiFp;
    var AuthApiFactory = function(configuration, basePath, axios) {
      const localVarFp = (0, exports.AuthApiFp)(configuration);
      return {
        getInvitableBrands(options) {
          return localVarFp.getInvitableBrands(options).then((request) => request(axios, basePath));
        },
        inviteDealerAccount(inviteAccountRequest, options) {
          return localVarFp.inviteDealerAccount(inviteAccountRequest, options).then((request) => request(axios, basePath));
        },
        queryDealerAccountOverview(page, pageSize, username, brandIds, status, options) {
          return localVarFp.queryDealerAccountOverview(page, pageSize, username, brandIds, status, options).then((request) => request(axios, basePath));
        },
        resendTemporaryPassword(bodyResendTemporaryPasswordAuthTemporaryPasswordPost, options) {
          return localVarFp.resendTemporaryPassword(bodyResendTemporaryPasswordAuthTemporaryPasswordPost, options).then((request) => request(axios, basePath));
        }
      };
    };
    exports.AuthApiFactory = AuthApiFactory;
    var AuthApi = class extends base_1.BaseAPI {
      getInvitableBrands(options) {
        return (0, exports.AuthApiFp)(this.configuration).getInvitableBrands(options).then((request) => request(this.axios, this.basePath));
      }
      inviteDealerAccount(inviteAccountRequest, options) {
        return (0, exports.AuthApiFp)(this.configuration).inviteDealerAccount(inviteAccountRequest, options).then((request) => request(this.axios, this.basePath));
      }
      queryDealerAccountOverview(page, pageSize, username, brandIds, status, options) {
        return (0, exports.AuthApiFp)(this.configuration).queryDealerAccountOverview(page, pageSize, username, brandIds, status, options).then((request) => request(this.axios, this.basePath));
      }
      resendTemporaryPassword(bodyResendTemporaryPasswordAuthTemporaryPasswordPost, options) {
        return (0, exports.AuthApiFp)(this.configuration).resendTemporaryPassword(bodyResendTemporaryPasswordAuthTemporaryPasswordPost, options).then((request) => request(this.axios, this.basePath));
      }
    };
    exports.AuthApi = AuthApi;
    var BikeApiAxiosParamCreator = function(configuration) {
      return {
        getActivityHistory: async (vin, reportedAtMin, reportedAtMax, page, pageSize, options = {}) => {
          (0, common_1.assertParamExists)("getActivityHistory", "vin", vin);
          (0, common_1.assertParamExists)("getActivityHistory", "reportedAtMin", reportedAtMin);
          (0, common_1.assertParamExists)("getActivityHistory", "reportedAtMax", reportedAtMax);
          const localVarPath = `/bike/{vin}/activity_history`.replace(`{${"vin"}}`, encodeURIComponent(String(vin)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          if (reportedAtMin !== void 0) {
            localVarQueryParameter["reported_at_min"] = reportedAtMin instanceof Date ? reportedAtMin.toISOString() : reportedAtMin;
          }
          if (reportedAtMax !== void 0) {
            localVarQueryParameter["reported_at_max"] = reportedAtMax instanceof Date ? reportedAtMax.toISOString() : reportedAtMax;
          }
          if (page !== void 0) {
            localVarQueryParameter["page"] = page;
          }
          if (pageSize !== void 0) {
            localVarQueryParameter["page_size"] = pageSize;
          }
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        getBikeErrorCodeHistory: async (bikeId, options = {}) => {
          (0, common_1.assertParamExists)("getBikeErrorCodeHistory", "bikeId", bikeId);
          const localVarPath = `/bike/{bike_id}/history/error_code`.replace(`{${"bike_id"}}`, encodeURIComponent(String(bikeId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        getBikeInfo: async (vin, options = {}) => {
          (0, common_1.assertParamExists)("getBikeInfo", "vin", vin);
          const localVarPath = `/bike/{vin}/info`.replace(`{${"vin"}}`, encodeURIComponent(String(vin)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        getBikeInformation: async (vin, options = {}) => {
          (0, common_1.assertParamExists)("getBikeInformation", "vin", vin);
          const localVarPath = `/bike/{vin}/information`.replace(`{${"vin"}}`, encodeURIComponent(String(vin)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        getFirmwareUpdates: async (bikeId, options = {}) => {
          (0, common_1.assertParamExists)("getFirmwareUpdates", "bikeId", bikeId);
          const localVarPath = `/bike/{bike_id}/history/firmware_updates`.replace(`{${"bike_id"}}`, encodeURIComponent(String(bikeId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        getPartReplacementHistory: async (bikeId, options = {}) => {
          (0, common_1.assertParamExists)("getPartReplacementHistory", "bikeId", bikeId);
          const localVarPath = `/bike/{bike_id}/history/replacement_part`.replace(`{${"bike_id"}}`, encodeURIComponent(String(bikeId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        getUnresolvedTaskHistory: async (vin, options = {}) => {
          (0, common_1.assertParamExists)("getUnresolvedTaskHistory", "vin", vin);
          const localVarPath = `/bike/{vin}/unresolved_task`.replace(`{${"vin"}}`, encodeURIComponent(String(vin)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        }
      };
    };
    exports.BikeApiAxiosParamCreator = BikeApiAxiosParamCreator;
    var BikeApiFp = function(configuration) {
      const localVarAxiosParamCreator = (0, exports.BikeApiAxiosParamCreator)(configuration);
      return {
        async getActivityHistory(vin, reportedAtMin, reportedAtMax, page, pageSize, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getActivityHistory(vin, reportedAtMin, reportedAtMax, page, pageSize, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["BikeApi.getActivityHistory"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async getBikeErrorCodeHistory(bikeId, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getBikeErrorCodeHistory(bikeId, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["BikeApi.getBikeErrorCodeHistory"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async getBikeInfo(vin, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getBikeInfo(vin, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["BikeApi.getBikeInfo"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async getBikeInformation(vin, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getBikeInformation(vin, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["BikeApi.getBikeInformation"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async getFirmwareUpdates(bikeId, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getFirmwareUpdates(bikeId, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["BikeApi.getFirmwareUpdates"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async getPartReplacementHistory(bikeId, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getPartReplacementHistory(bikeId, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["BikeApi.getPartReplacementHistory"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async getUnresolvedTaskHistory(vin, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getUnresolvedTaskHistory(vin, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["BikeApi.getUnresolvedTaskHistory"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        }
      };
    };
    exports.BikeApiFp = BikeApiFp;
    var BikeApiFactory = function(configuration, basePath, axios) {
      const localVarFp = (0, exports.BikeApiFp)(configuration);
      return {
        getActivityHistory(vin, reportedAtMin, reportedAtMax, page, pageSize, options) {
          return localVarFp.getActivityHistory(vin, reportedAtMin, reportedAtMax, page, pageSize, options).then((request) => request(axios, basePath));
        },
        getBikeErrorCodeHistory(bikeId, options) {
          return localVarFp.getBikeErrorCodeHistory(bikeId, options).then((request) => request(axios, basePath));
        },
        getBikeInfo(vin, options) {
          return localVarFp.getBikeInfo(vin, options).then((request) => request(axios, basePath));
        },
        getBikeInformation(vin, options) {
          return localVarFp.getBikeInformation(vin, options).then((request) => request(axios, basePath));
        },
        getFirmwareUpdates(bikeId, options) {
          return localVarFp.getFirmwareUpdates(bikeId, options).then((request) => request(axios, basePath));
        },
        getPartReplacementHistory(bikeId, options) {
          return localVarFp.getPartReplacementHistory(bikeId, options).then((request) => request(axios, basePath));
        },
        getUnresolvedTaskHistory(vin, options) {
          return localVarFp.getUnresolvedTaskHistory(vin, options).then((request) => request(axios, basePath));
        }
      };
    };
    exports.BikeApiFactory = BikeApiFactory;
    var BikeApi = class extends base_1.BaseAPI {
      getActivityHistory(vin, reportedAtMin, reportedAtMax, page, pageSize, options) {
        return (0, exports.BikeApiFp)(this.configuration).getActivityHistory(vin, reportedAtMin, reportedAtMax, page, pageSize, options).then((request) => request(this.axios, this.basePath));
      }
      getBikeErrorCodeHistory(bikeId, options) {
        return (0, exports.BikeApiFp)(this.configuration).getBikeErrorCodeHistory(bikeId, options).then((request) => request(this.axios, this.basePath));
      }
      getBikeInfo(vin, options) {
        return (0, exports.BikeApiFp)(this.configuration).getBikeInfo(vin, options).then((request) => request(this.axios, this.basePath));
      }
      getBikeInformation(vin, options) {
        return (0, exports.BikeApiFp)(this.configuration).getBikeInformation(vin, options).then((request) => request(this.axios, this.basePath));
      }
      getFirmwareUpdates(bikeId, options) {
        return (0, exports.BikeApiFp)(this.configuration).getFirmwareUpdates(bikeId, options).then((request) => request(this.axios, this.basePath));
      }
      getPartReplacementHistory(bikeId, options) {
        return (0, exports.BikeApiFp)(this.configuration).getPartReplacementHistory(bikeId, options).then((request) => request(this.axios, this.basePath));
      }
      getUnresolvedTaskHistory(vin, options) {
        return (0, exports.BikeApiFp)(this.configuration).getUnresolvedTaskHistory(vin, options).then((request) => request(this.axios, this.basePath));
      }
    };
    exports.BikeApi = BikeApi;
    var BikeSpecApiAxiosParamCreator = function(configuration) {
      return {
        getBikeSpecBundleRule: async (id, options = {}) => {
          (0, common_1.assertParamExists)("getBikeSpecBundleRule", "id", id);
          const localVarPath = `/bike_spec/{id}/bundle_rule`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        getBikeSpecList: async (options = {}) => {
          const localVarPath = `/bike_spec/`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        }
      };
    };
    exports.BikeSpecApiAxiosParamCreator = BikeSpecApiAxiosParamCreator;
    var BikeSpecApiFp = function(configuration) {
      const localVarAxiosParamCreator = (0, exports.BikeSpecApiAxiosParamCreator)(configuration);
      return {
        async getBikeSpecBundleRule(id, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getBikeSpecBundleRule(id, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["BikeSpecApi.getBikeSpecBundleRule"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async getBikeSpecList(options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getBikeSpecList(options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["BikeSpecApi.getBikeSpecList"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        }
      };
    };
    exports.BikeSpecApiFp = BikeSpecApiFp;
    var BikeSpecApiFactory = function(configuration, basePath, axios) {
      const localVarFp = (0, exports.BikeSpecApiFp)(configuration);
      return {
        getBikeSpecBundleRule(id, options) {
          return localVarFp.getBikeSpecBundleRule(id, options).then((request) => request(axios, basePath));
        },
        getBikeSpecList(options) {
          return localVarFp.getBikeSpecList(options).then((request) => request(axios, basePath));
        }
      };
    };
    exports.BikeSpecApiFactory = BikeSpecApiFactory;
    var BikeSpecApi = class extends base_1.BaseAPI {
      getBikeSpecBundleRule(id, options) {
        return (0, exports.BikeSpecApiFp)(this.configuration).getBikeSpecBundleRule(id, options).then((request) => request(this.axios, this.basePath));
      }
      getBikeSpecList(options) {
        return (0, exports.BikeSpecApiFp)(this.configuration).getBikeSpecList(options).then((request) => request(this.axios, this.basePath));
      }
    };
    exports.BikeSpecApi = BikeSpecApi;
    var CaseManagementApiAxiosParamCreator = function(configuration) {
      return {
        getCaseManagementList: async (caseType, options = {}) => {
          (0, common_1.assertParamExists)("getCaseManagementList", "caseType", caseType);
          const localVarPath = `/case_management/`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          if (caseType !== void 0) {
            localVarQueryParameter["case_type"] = caseType;
          }
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        getPostBundleCaseById: async (id, options = {}) => {
          (0, common_1.assertParamExists)("getPostBundleCaseById", "id", id);
          const localVarPath = `/case_management/{id}/post_bundle`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        getVerifyWorkspaceCaseById: async (id, options = {}) => {
          (0, common_1.assertParamExists)("getVerifyWorkspaceCaseById", "id", id);
          const localVarPath = `/case_management/{id}/verify_workspace`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        handlePostBundleCase: async (id, updatePostBundleRequest, options = {}) => {
          (0, common_1.assertParamExists)("handlePostBundleCase", "id", id);
          (0, common_1.assertParamExists)("handlePostBundleCase", "updatePostBundleRequest", updatePostBundleRequest);
          const localVarPath = `/case_management/{id}/post_bundle/handle`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updatePostBundleRequest, localVarRequestOptions, configuration);
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        handleVerifyWorkspaceCase: async (id, updateVerifyWorkspaceRequest, options = {}) => {
          (0, common_1.assertParamExists)("handleVerifyWorkspaceCase", "id", id);
          (0, common_1.assertParamExists)("handleVerifyWorkspaceCase", "updateVerifyWorkspaceRequest", updateVerifyWorkspaceRequest);
          const localVarPath = `/case_management/{id}/verify_workspace/handle`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateVerifyWorkspaceRequest, localVarRequestOptions, configuration);
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        updatePostBundleCase: async (id, updatePostBundleRequest, options = {}) => {
          (0, common_1.assertParamExists)("updatePostBundleCase", "id", id);
          (0, common_1.assertParamExists)("updatePostBundleCase", "updatePostBundleRequest", updatePostBundleRequest);
          const localVarPath = `/case_management/{id}/post_bundle`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updatePostBundleRequest, localVarRequestOptions, configuration);
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        }
      };
    };
    exports.CaseManagementApiAxiosParamCreator = CaseManagementApiAxiosParamCreator;
    var CaseManagementApiFp = function(configuration) {
      const localVarAxiosParamCreator = (0, exports.CaseManagementApiAxiosParamCreator)(configuration);
      return {
        async getCaseManagementList(caseType, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getCaseManagementList(caseType, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["CaseManagementApi.getCaseManagementList"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async getPostBundleCaseById(id, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getPostBundleCaseById(id, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["CaseManagementApi.getPostBundleCaseById"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async getVerifyWorkspaceCaseById(id, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getVerifyWorkspaceCaseById(id, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["CaseManagementApi.getVerifyWorkspaceCaseById"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async handlePostBundleCase(id, updatePostBundleRequest, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.handlePostBundleCase(id, updatePostBundleRequest, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["CaseManagementApi.handlePostBundleCase"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async handleVerifyWorkspaceCase(id, updateVerifyWorkspaceRequest, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.handleVerifyWorkspaceCase(id, updateVerifyWorkspaceRequest, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["CaseManagementApi.handleVerifyWorkspaceCase"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async updatePostBundleCase(id, updatePostBundleRequest, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.updatePostBundleCase(id, updatePostBundleRequest, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["CaseManagementApi.updatePostBundleCase"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        }
      };
    };
    exports.CaseManagementApiFp = CaseManagementApiFp;
    var CaseManagementApiFactory = function(configuration, basePath, axios) {
      const localVarFp = (0, exports.CaseManagementApiFp)(configuration);
      return {
        getCaseManagementList(caseType, options) {
          return localVarFp.getCaseManagementList(caseType, options).then((request) => request(axios, basePath));
        },
        getPostBundleCaseById(id, options) {
          return localVarFp.getPostBundleCaseById(id, options).then((request) => request(axios, basePath));
        },
        getVerifyWorkspaceCaseById(id, options) {
          return localVarFp.getVerifyWorkspaceCaseById(id, options).then((request) => request(axios, basePath));
        },
        handlePostBundleCase(id, updatePostBundleRequest, options) {
          return localVarFp.handlePostBundleCase(id, updatePostBundleRequest, options).then((request) => request(axios, basePath));
        },
        handleVerifyWorkspaceCase(id, updateVerifyWorkspaceRequest, options) {
          return localVarFp.handleVerifyWorkspaceCase(id, updateVerifyWorkspaceRequest, options).then((request) => request(axios, basePath));
        },
        updatePostBundleCase(id, updatePostBundleRequest, options) {
          return localVarFp.updatePostBundleCase(id, updatePostBundleRequest, options).then((request) => request(axios, basePath));
        }
      };
    };
    exports.CaseManagementApiFactory = CaseManagementApiFactory;
    var CaseManagementApi = class extends base_1.BaseAPI {
      getCaseManagementList(caseType, options) {
        return (0, exports.CaseManagementApiFp)(this.configuration).getCaseManagementList(caseType, options).then((request) => request(this.axios, this.basePath));
      }
      getPostBundleCaseById(id, options) {
        return (0, exports.CaseManagementApiFp)(this.configuration).getPostBundleCaseById(id, options).then((request) => request(this.axios, this.basePath));
      }
      getVerifyWorkspaceCaseById(id, options) {
        return (0, exports.CaseManagementApiFp)(this.configuration).getVerifyWorkspaceCaseById(id, options).then((request) => request(this.axios, this.basePath));
      }
      handlePostBundleCase(id, updatePostBundleRequest, options) {
        return (0, exports.CaseManagementApiFp)(this.configuration).handlePostBundleCase(id, updatePostBundleRequest, options).then((request) => request(this.axios, this.basePath));
      }
      handleVerifyWorkspaceCase(id, updateVerifyWorkspaceRequest, options) {
        return (0, exports.CaseManagementApiFp)(this.configuration).handleVerifyWorkspaceCase(id, updateVerifyWorkspaceRequest, options).then((request) => request(this.axios, this.basePath));
      }
      updatePostBundleCase(id, updatePostBundleRequest, options) {
        return (0, exports.CaseManagementApiFp)(this.configuration).updatePostBundleCase(id, updatePostBundleRequest, options).then((request) => request(this.axios, this.basePath));
      }
    };
    exports.CaseManagementApi = CaseManagementApi;
    var DealerSupportHubApiAxiosParamCreator = function(configuration) {
      return {
        getDealerSupportHubById: async (id, options = {}) => {
          (0, common_1.assertParamExists)("getDealerSupportHubById", "id", id);
          const localVarPath = `/dealer_support_hub/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        getDealerSupportHubList: async (_case, options = {}) => {
          const localVarPath = `/dealer_support_hub`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          if (_case !== void 0) {
            localVarQueryParameter["case"] = _case;
          }
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        handleDealerSupportHub: async (id, options = {}) => {
          (0, common_1.assertParamExists)("handleDealerSupportHub", "id", id);
          const localVarPath = `/dealer_support_hub/{id}/handle_case`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        updateDealerSupportHub: async (id, updateDealerSupportHubRequest, options = {}) => {
          (0, common_1.assertParamExists)("updateDealerSupportHub", "id", id);
          (0, common_1.assertParamExists)("updateDealerSupportHub", "updateDealerSupportHubRequest", updateDealerSupportHubRequest);
          const localVarPath = `/dealer_support_hub/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateDealerSupportHubRequest, localVarRequestOptions, configuration);
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        }
      };
    };
    exports.DealerSupportHubApiAxiosParamCreator = DealerSupportHubApiAxiosParamCreator;
    var DealerSupportHubApiFp = function(configuration) {
      const localVarAxiosParamCreator = (0, exports.DealerSupportHubApiAxiosParamCreator)(configuration);
      return {
        async getDealerSupportHubById(id, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getDealerSupportHubById(id, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["DealerSupportHubApi.getDealerSupportHubById"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async getDealerSupportHubList(_case, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getDealerSupportHubList(_case, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["DealerSupportHubApi.getDealerSupportHubList"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async handleDealerSupportHub(id, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.handleDealerSupportHub(id, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["DealerSupportHubApi.handleDealerSupportHub"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async updateDealerSupportHub(id, updateDealerSupportHubRequest, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.updateDealerSupportHub(id, updateDealerSupportHubRequest, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["DealerSupportHubApi.updateDealerSupportHub"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        }
      };
    };
    exports.DealerSupportHubApiFp = DealerSupportHubApiFp;
    var DealerSupportHubApiFactory = function(configuration, basePath, axios) {
      const localVarFp = (0, exports.DealerSupportHubApiFp)(configuration);
      return {
        getDealerSupportHubById(id, options) {
          return localVarFp.getDealerSupportHubById(id, options).then((request) => request(axios, basePath));
        },
        getDealerSupportHubList(_case, options) {
          return localVarFp.getDealerSupportHubList(_case, options).then((request) => request(axios, basePath));
        },
        handleDealerSupportHub(id, options) {
          return localVarFp.handleDealerSupportHub(id, options).then((request) => request(axios, basePath));
        },
        updateDealerSupportHub(id, updateDealerSupportHubRequest, options) {
          return localVarFp.updateDealerSupportHub(id, updateDealerSupportHubRequest, options).then((request) => request(axios, basePath));
        }
      };
    };
    exports.DealerSupportHubApiFactory = DealerSupportHubApiFactory;
    var DealerSupportHubApi = class extends base_1.BaseAPI {
      getDealerSupportHubById(id, options) {
        return (0, exports.DealerSupportHubApiFp)(this.configuration).getDealerSupportHubById(id, options).then((request) => request(this.axios, this.basePath));
      }
      getDealerSupportHubList(_case, options) {
        return (0, exports.DealerSupportHubApiFp)(this.configuration).getDealerSupportHubList(_case, options).then((request) => request(this.axios, this.basePath));
      }
      handleDealerSupportHub(id, options) {
        return (0, exports.DealerSupportHubApiFp)(this.configuration).handleDealerSupportHub(id, options).then((request) => request(this.axios, this.basePath));
      }
      updateDealerSupportHub(id, updateDealerSupportHubRequest, options) {
        return (0, exports.DealerSupportHubApiFp)(this.configuration).updateDealerSupportHub(id, updateDealerSupportHubRequest, options).then((request) => request(this.axios, this.basePath));
      }
    };
    exports.DealerSupportHubApi = DealerSupportHubApi;
    var EnumerationApiAxiosParamCreator = function(configuration) {
      return {
        getBikeShopList: async (options = {}) => {
          const localVarPath = `/enumeration/bike_shop`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        getBrandList: async (options = {}) => {
          const localVarPath = `/enumeration/brand`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        getPartSpecList: async (options = {}) => {
          const localVarPath = `/enumeration/part_spec`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        getServiceCenterList: async (options = {}) => {
          const localVarPath = `/enumeration/service_center`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        }
      };
    };
    exports.EnumerationApiAxiosParamCreator = EnumerationApiAxiosParamCreator;
    var EnumerationApiFp = function(configuration) {
      const localVarAxiosParamCreator = (0, exports.EnumerationApiAxiosParamCreator)(configuration);
      return {
        async getBikeShopList(options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getBikeShopList(options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["EnumerationApi.getBikeShopList"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async getBrandList(options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getBrandList(options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["EnumerationApi.getBrandList"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async getPartSpecList(options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getPartSpecList(options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["EnumerationApi.getPartSpecList"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async getServiceCenterList(options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceCenterList(options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["EnumerationApi.getServiceCenterList"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        }
      };
    };
    exports.EnumerationApiFp = EnumerationApiFp;
    var EnumerationApiFactory = function(configuration, basePath, axios) {
      const localVarFp = (0, exports.EnumerationApiFp)(configuration);
      return {
        getBikeShopList(options) {
          return localVarFp.getBikeShopList(options).then((request) => request(axios, basePath));
        },
        getBrandList(options) {
          return localVarFp.getBrandList(options).then((request) => request(axios, basePath));
        },
        getPartSpecList(options) {
          return localVarFp.getPartSpecList(options).then((request) => request(axios, basePath));
        },
        getServiceCenterList(options) {
          return localVarFp.getServiceCenterList(options).then((request) => request(axios, basePath));
        }
      };
    };
    exports.EnumerationApiFactory = EnumerationApiFactory;
    var EnumerationApi = class extends base_1.BaseAPI {
      getBikeShopList(options) {
        return (0, exports.EnumerationApiFp)(this.configuration).getBikeShopList(options).then((request) => request(this.axios, this.basePath));
      }
      getBrandList(options) {
        return (0, exports.EnumerationApiFp)(this.configuration).getBrandList(options).then((request) => request(this.axios, this.basePath));
      }
      getPartSpecList(options) {
        return (0, exports.EnumerationApiFp)(this.configuration).getPartSpecList(options).then((request) => request(this.axios, this.basePath));
      }
      getServiceCenterList(options) {
        return (0, exports.EnumerationApiFp)(this.configuration).getServiceCenterList(options).then((request) => request(this.axios, this.basePath));
      }
    };
    exports.EnumerationApi = EnumerationApi;
    var InstructionApiAxiosParamCreator = function(configuration) {
      return {
        get: async (options = {}) => {
          const localVarPath = `/instruction/`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        getInstructionI18n: async (language, options = {}) => {
          (0, common_1.assertParamExists)("getInstructionI18n", "language", language);
          const localVarPath = `/instruction/split_procedure`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          if (language !== void 0) {
            localVarQueryParameter["language"] = language;
          }
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        }
      };
    };
    exports.InstructionApiAxiosParamCreator = InstructionApiAxiosParamCreator;
    var InstructionApiFp = function(configuration) {
      const localVarAxiosParamCreator = (0, exports.InstructionApiAxiosParamCreator)(configuration);
      return {
        async get(options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.get(options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["InstructionApi.get"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async getInstructionI18n(language, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getInstructionI18n(language, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["InstructionApi.getInstructionI18n"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        }
      };
    };
    exports.InstructionApiFp = InstructionApiFp;
    var InstructionApiFactory = function(configuration, basePath, axios) {
      const localVarFp = (0, exports.InstructionApiFp)(configuration);
      return {
        get(options) {
          return localVarFp.get(options).then((request) => request(axios, basePath));
        },
        getInstructionI18n(language, options) {
          return localVarFp.getInstructionI18n(language, options).then((request) => request(axios, basePath));
        }
      };
    };
    exports.InstructionApiFactory = InstructionApiFactory;
    var InstructionApi = class extends base_1.BaseAPI {
      get(options) {
        return (0, exports.InstructionApiFp)(this.configuration).get(options).then((request) => request(this.axios, this.basePath));
      }
      getInstructionI18n(language, options) {
        return (0, exports.InstructionApiFp)(this.configuration).getInstructionI18n(language, options).then((request) => request(this.axios, this.basePath));
      }
    };
    exports.InstructionApi = InstructionApi;
    var PostBundleApiAxiosParamCreator = function(configuration) {
      return {
        createProductBikeByPostBundleBike: async (id, options = {}) => {
          (0, common_1.assertParamExists)("createProductBikeByPostBundleBike", "id", id);
          const localVarPath = `/dealer_support_hub/{id}/post_bundle/bike`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        getPostBundleByDealerSupportHubById: async (id, options = {}) => {
          (0, common_1.assertParamExists)("getPostBundleByDealerSupportHubById", "id", id);
          const localVarPath = `/dealer_support_hub/{id}/post_bundle`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        getPostBundleByVerifyCode: async (verifyCode, options = {}) => {
          (0, common_1.assertParamExists)("getPostBundleByVerifyCode", "verifyCode", verifyCode);
          const localVarPath = `/dealer_support_hub/post_bundle/verify_code/{verify_code}`.replace(`{${"verify_code"}}`, encodeURIComponent(String(verifyCode)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        getPostBundleOverview: async (options = {}) => {
          const localVarPath = `/dealer_support_hub/post_bundle`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        updatePostBundle: async (id, oldUpdatePostBundleRequest, options = {}) => {
          (0, common_1.assertParamExists)("updatePostBundle", "id", id);
          (0, common_1.assertParamExists)("updatePostBundle", "oldUpdatePostBundleRequest", oldUpdatePostBundleRequest);
          const localVarPath = `/dealer_support_hub/{id}/post_bundle`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          localVarHeaderParameter["Content-Type"] = "application/json";
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(oldUpdatePostBundleRequest, localVarRequestOptions, configuration);
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        }
      };
    };
    exports.PostBundleApiAxiosParamCreator = PostBundleApiAxiosParamCreator;
    var PostBundleApiFp = function(configuration) {
      const localVarAxiosParamCreator = (0, exports.PostBundleApiAxiosParamCreator)(configuration);
      return {
        async createProductBikeByPostBundleBike(id, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.createProductBikeByPostBundleBike(id, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["PostBundleApi.createProductBikeByPostBundleBike"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async getPostBundleByDealerSupportHubById(id, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getPostBundleByDealerSupportHubById(id, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["PostBundleApi.getPostBundleByDealerSupportHubById"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async getPostBundleByVerifyCode(verifyCode, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getPostBundleByVerifyCode(verifyCode, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["PostBundleApi.getPostBundleByVerifyCode"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async getPostBundleOverview(options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getPostBundleOverview(options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["PostBundleApi.getPostBundleOverview"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async updatePostBundle(id, oldUpdatePostBundleRequest, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.updatePostBundle(id, oldUpdatePostBundleRequest, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["PostBundleApi.updatePostBundle"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        }
      };
    };
    exports.PostBundleApiFp = PostBundleApiFp;
    var PostBundleApiFactory = function(configuration, basePath, axios) {
      const localVarFp = (0, exports.PostBundleApiFp)(configuration);
      return {
        createProductBikeByPostBundleBike(id, options) {
          return localVarFp.createProductBikeByPostBundleBike(id, options).then((request) => request(axios, basePath));
        },
        getPostBundleByDealerSupportHubById(id, options) {
          return localVarFp.getPostBundleByDealerSupportHubById(id, options).then((request) => request(axios, basePath));
        },
        getPostBundleByVerifyCode(verifyCode, options) {
          return localVarFp.getPostBundleByVerifyCode(verifyCode, options).then((request) => request(axios, basePath));
        },
        getPostBundleOverview(options) {
          return localVarFp.getPostBundleOverview(options).then((request) => request(axios, basePath));
        },
        updatePostBundle(id, oldUpdatePostBundleRequest, options) {
          return localVarFp.updatePostBundle(id, oldUpdatePostBundleRequest, options).then((request) => request(axios, basePath));
        }
      };
    };
    exports.PostBundleApiFactory = PostBundleApiFactory;
    var PostBundleApi = class extends base_1.BaseAPI {
      createProductBikeByPostBundleBike(id, options) {
        return (0, exports.PostBundleApiFp)(this.configuration).createProductBikeByPostBundleBike(id, options).then((request) => request(this.axios, this.basePath));
      }
      getPostBundleByDealerSupportHubById(id, options) {
        return (0, exports.PostBundleApiFp)(this.configuration).getPostBundleByDealerSupportHubById(id, options).then((request) => request(this.axios, this.basePath));
      }
      getPostBundleByVerifyCode(verifyCode, options) {
        return (0, exports.PostBundleApiFp)(this.configuration).getPostBundleByVerifyCode(verifyCode, options).then((request) => request(this.axios, this.basePath));
      }
      getPostBundleOverview(options) {
        return (0, exports.PostBundleApiFp)(this.configuration).getPostBundleOverview(options).then((request) => request(this.axios, this.basePath));
      }
      updatePostBundle(id, oldUpdatePostBundleRequest, options) {
        return (0, exports.PostBundleApiFp)(this.configuration).updatePostBundle(id, oldUpdatePostBundleRequest, options).then((request) => request(this.axios, this.basePath));
      }
    };
    exports.PostBundleApi = PostBundleApi;
    var ZendeskApiAxiosParamCreator = function(configuration) {
      return {
        getCategoryList: async (options = {}) => {
          const localVarPath = `/zendesk/category`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        },
        queryArticlesByCategory: async (id, options = {}) => {
          (0, common_1.assertParamExists)("queryArticlesByCategory", "id", id);
          const localVarPath = `/zendesk/category/{id}/article`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
          (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
          return {
            url: (0, common_1.toPathString)(localVarUrlObj),
            options: localVarRequestOptions
          };
        }
      };
    };
    exports.ZendeskApiAxiosParamCreator = ZendeskApiAxiosParamCreator;
    var ZendeskApiFp = function(configuration) {
      const localVarAxiosParamCreator = (0, exports.ZendeskApiAxiosParamCreator)(configuration);
      return {
        async getCategoryList(options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.getCategoryList(options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["ZendeskApi.getCategoryList"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        async queryArticlesByCategory(id, options) {
          var _a, _b, _c;
          const localVarAxiosArgs = await localVarAxiosParamCreator.queryArticlesByCategory(id, options);
          const localVarOperationServerIndex = (_a = configuration == null ? void 0 : configuration.serverIndex) != null ? _a : 0;
          const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap["ZendeskApi.queryArticlesByCategory"]) == null ? void 0 : _b[localVarOperationServerIndex]) == null ? void 0 : _c.url;
          return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        }
      };
    };
    exports.ZendeskApiFp = ZendeskApiFp;
    var ZendeskApiFactory = function(configuration, basePath, axios) {
      const localVarFp = (0, exports.ZendeskApiFp)(configuration);
      return {
        getCategoryList(options) {
          return localVarFp.getCategoryList(options).then((request) => request(axios, basePath));
        },
        queryArticlesByCategory(id, options) {
          return localVarFp.queryArticlesByCategory(id, options).then((request) => request(axios, basePath));
        }
      };
    };
    exports.ZendeskApiFactory = ZendeskApiFactory;
    var ZendeskApi = class extends base_1.BaseAPI {
      getCategoryList(options) {
        return (0, exports.ZendeskApiFp)(this.configuration).getCategoryList(options).then((request) => request(this.axios, this.basePath));
      }
      queryArticlesByCategory(id, options) {
        return (0, exports.ZendeskApiFp)(this.configuration).queryArticlesByCategory(id, options).then((request) => request(this.axios, this.basePath));
      }
    };
    exports.ZendeskApi = ZendeskApi;
  }
});

// node_modules/hyena-brand-portal-api-client/egg/configuration.js
var require_configuration = __commonJS({
  "node_modules/hyena-brand-portal-api-client/egg/configuration.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Configuration = void 0;
    var Configuration = class {
      constructor(param = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
      }
      isJsonMime(mime) {
        const jsonMime = new RegExp("^(application/json|[^;/ 	]+/[^;/ 	]+[+]json)[ 	]*(;.*)?$", "i");
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === "application/json-patch+json");
      }
    };
    exports.Configuration = Configuration;
  }
});

// node_modules/hyena-brand-portal-api-client/egg/index.js
var require_egg = __commonJS({
  "node_modules/hyena-brand-portal-api-client/egg/index.js"(exports) {
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_api(), exports);
    __exportStar(require_configuration(), exports);
  }
});
export default require_egg();
//# sourceMappingURL=hyena-brand-portal-api-client.js.map
