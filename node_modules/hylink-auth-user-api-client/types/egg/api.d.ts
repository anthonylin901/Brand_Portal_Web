/**
 * Authorizer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface ChangePasswordRequest
 */
export interface ChangePasswordRequest {
    /**
     *
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    'username': string;
    /**
     *
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    'previous_password': string;
    /**
     *
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    'proposed_password': string;
}
/**
 *
 * @export
 * @interface ConfirmForgotPasswordRequest
 */
export interface ConfirmForgotPasswordRequest {
    /**
     *
     * @type {string}
     * @memberof ConfirmForgotPasswordRequest
     */
    'username': string;
    /**
     *
     * @type {string}
     * @memberof ConfirmForgotPasswordRequest
     */
    'password': string;
    /**
     *
     * @type {string}
     * @memberof ConfirmForgotPasswordRequest
     */
    'confirmation_code': string;
}
/**
 *
 * @export
 * @interface ForgotPasswordRequest
 */
export interface ForgotPasswordRequest {
    /**
     *
     * @type {string}
     * @memberof ForgotPasswordRequest
     */
    'username': string;
    /**
     *
     * @type {string}
     * @memberof ForgotPasswordRequest
     */
    'platform': string;
}
/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     *
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 *
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 *
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     *
     * @type {string}
     * @memberof LoginRequest
     */
    'username': string;
    /**
     *
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 *
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     *
     * @type {string}
     * @memberof LoginResponse
     */
    'id_token': string;
    /**
     *
     * @type {string}
     * @memberof LoginResponse
     */
    'access_token': string;
    /**
     *
     * @type {string}
     * @memberof LoginResponse
     */
    'refresh_token': string;
    /**
     *
     * @type {string}
     * @memberof LoginResponse
     */
    'hyena_token': string;
}
/**
 *
 * @export
 * @interface RefreshTokenRequest
 */
export interface RefreshTokenRequest {
    /**
     *
     * @type {string}
     * @memberof RefreshTokenRequest
     */
    'id_token': string;
    /**
     *
     * @type {string}
     * @memberof RefreshTokenRequest
     */
    'refresh_token': string;
}
/**
 *
 * @export
 * @interface RefreshTokenResponse
 */
export interface RefreshTokenResponse {
    /**
     *
     * @type {string}
     * @memberof RefreshTokenResponse
     */
    'id_token': string;
    /**
     *
     * @type {string}
     * @memberof RefreshTokenResponse
     */
    'access_token': string;
    /**
     *
     * @type {string}
     * @memberof RefreshTokenResponse
     */
    'refresh_token': string;
}
/**
 *
 * @export
 * @interface SingleResponseDict
 */
export interface SingleResponseDict {
    /**
     *
     * @type {object}
     * @memberof SingleResponseDict
     */
    'result': object;
}
/**
 *
 * @export
 * @interface SingleResponseLoginResponse
 */
export interface SingleResponseLoginResponse {
    /**
     *
     * @type {LoginResponse}
     * @memberof SingleResponseLoginResponse
     */
    'result': LoginResponse;
}
/**
 *
 * @export
 * @interface SingleResponseRefreshTokenResponse
 */
export interface SingleResponseRefreshTokenResponse {
    /**
     *
     * @type {RefreshTokenResponse}
     * @memberof SingleResponseRefreshTokenResponse
     */
    'result': RefreshTokenResponse;
}
/**
 *
 * @export
 * @interface SingleResponseUserDetail
 */
export interface SingleResponseUserDetail {
    /**
     *
     * @type {UserDetail}
     * @memberof SingleResponseUserDetail
     */
    'result': UserDetail;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare const Status: {
    readonly Enabled: "enabled";
    readonly Disabled: "disabled";
};
export type Status = typeof Status[keyof typeof Status];
/**
 *
 * @export
 * @interface UserDetail
 */
export interface UserDetail {
    /**
     *
     * @type {string}
     * @memberof UserDetail
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UserDetail
     */
    'username': string;
    /**
     *
     * @type {Status}
     * @memberof UserDetail
     */
    'status': Status;
    /**
     *
     * @type {object}
     * @memberof UserDetail
     */
    'roles'?: object;
    /**
     *
     * @type {object}
     * @memberof UserDetail
     */
    'attributes'?: object;
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     *
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     *
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     *
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * UserApi - axios parameter creator
 * @export
 */
export declare const UserApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Change Password
     * @param {ChangePasswordRequest} changePasswordRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePassword: (changePasswordRequest: ChangePasswordRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Confirm Forgot Password
     * @param {ConfirmForgotPasswordRequest} confirmForgotPasswordRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmForgotPassword: (confirmForgotPasswordRequest: ConfirmForgotPasswordRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Forgot Password
     * @param {ForgotPasswordRequest} forgotPasswordRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forgotPassword: (forgotPasswordRequest: ForgotPasswordRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Permissions
     * @param {string} platform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPermissions: (platform: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Login
     * @param {LoginRequest} loginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: (loginRequest: LoginRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Refresh Token
     * @param {RefreshTokenRequest} refreshTokenRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken: (refreshTokenRequest: RefreshTokenRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Verify Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyToken: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserApi - functional programming interface
 * @export
 */
export declare const UserApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Change Password
     * @param {ChangePasswordRequest} changePasswordRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePassword(changePasswordRequest: ChangePasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Confirm Forgot Password
     * @param {ConfirmForgotPasswordRequest} confirmForgotPasswordRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmForgotPassword(confirmForgotPasswordRequest: ConfirmForgotPasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Forgot Password
     * @param {ForgotPasswordRequest} forgotPasswordRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forgotPassword(forgotPasswordRequest: ForgotPasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Get Permissions
     * @param {string} platform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPermissions(platform: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResponseDict>>;
    /**
     *
     * @summary Get User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResponseUserDetail>>;
    /**
     *
     * @summary Login
     * @param {LoginRequest} loginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(loginRequest: LoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResponseLoginResponse>>;
    /**
     *
     * @summary Refresh Token
     * @param {RefreshTokenRequest} refreshTokenRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken(refreshTokenRequest: RefreshTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResponseRefreshTokenResponse>>;
    /**
     *
     * @summary Verify Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyToken(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResponseDict>>;
};
/**
 * UserApi - factory interface
 * @export
 */
export declare const UserApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Change Password
     * @param {ChangePasswordRequest} changePasswordRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePassword(changePasswordRequest: ChangePasswordRequest, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Confirm Forgot Password
     * @param {ConfirmForgotPasswordRequest} confirmForgotPasswordRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmForgotPassword(confirmForgotPasswordRequest: ConfirmForgotPasswordRequest, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Forgot Password
     * @param {ForgotPasswordRequest} forgotPasswordRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forgotPassword(forgotPasswordRequest: ForgotPasswordRequest, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Get Permissions
     * @param {string} platform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPermissions(platform: string, options?: any): AxiosPromise<SingleResponseDict>;
    /**
     *
     * @summary Get User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(options?: any): AxiosPromise<SingleResponseUserDetail>;
    /**
     *
     * @summary Login
     * @param {LoginRequest} loginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(loginRequest: LoginRequest, options?: any): AxiosPromise<SingleResponseLoginResponse>;
    /**
     *
     * @summary Refresh Token
     * @param {RefreshTokenRequest} refreshTokenRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken(refreshTokenRequest: RefreshTokenRequest, options?: any): AxiosPromise<SingleResponseRefreshTokenResponse>;
    /**
     *
     * @summary Verify Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyToken(options?: any): AxiosPromise<SingleResponseDict>;
};
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export declare class UserApi extends BaseAPI {
    /**
     *
     * @summary Change Password
     * @param {ChangePasswordRequest} changePasswordRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    changePassword(changePasswordRequest: ChangePasswordRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Confirm Forgot Password
     * @param {ConfirmForgotPasswordRequest} confirmForgotPasswordRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    confirmForgotPassword(confirmForgotPasswordRequest: ConfirmForgotPasswordRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Forgot Password
     * @param {ForgotPasswordRequest} forgotPasswordRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    forgotPassword(forgotPasswordRequest: ForgotPasswordRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Get Permissions
     * @param {string} platform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getPermissions(platform: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleResponseDict, any>>;
    /**
     *
     * @summary Get User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUser(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleResponseUserDetail, any>>;
    /**
     *
     * @summary Login
     * @param {LoginRequest} loginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    login(loginRequest: LoginRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleResponseLoginResponse, any>>;
    /**
     *
     * @summary Refresh Token
     * @param {RefreshTokenRequest} refreshTokenRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    refreshToken(refreshTokenRequest: RefreshTokenRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleResponseRefreshTokenResponse, any>>;
    /**
     *
     * @summary Verify Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    verifyToken(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleResponseDict, any>>;
}
