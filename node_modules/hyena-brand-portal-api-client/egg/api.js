"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Brand Portal System
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostBundleApiFactory = exports.PostBundleApiFp = exports.PostBundleApiAxiosParamCreator = exports.InstructionApi = exports.InstructionApiFactory = exports.InstructionApiFp = exports.InstructionApiAxiosParamCreator = exports.EnumerationApi = exports.EnumerationApiFactory = exports.EnumerationApiFp = exports.EnumerationApiAxiosParamCreator = exports.DealerSupportHubApi = exports.DealerSupportHubApiFactory = exports.DealerSupportHubApiFp = exports.DealerSupportHubApiAxiosParamCreator = exports.CaseManagementApi = exports.CaseManagementApiFactory = exports.CaseManagementApiFp = exports.CaseManagementApiAxiosParamCreator = exports.BikeSpecApi = exports.BikeSpecApiFactory = exports.BikeSpecApiFp = exports.BikeSpecApiAxiosParamCreator = exports.BikeApi = exports.BikeApiFactory = exports.BikeApiFp = exports.BikeApiAxiosParamCreator = exports.AuthApi = exports.AuthApiFactory = exports.AuthApiFp = exports.AuthApiAxiosParamCreator = exports.UnitOfLengthOption = exports.TaskRule = exports.Status = exports.SpeedLimitOption = exports.ReporterRole = exports.ReportedSystem = exports.ReportedOrganizationEnum = exports.ReplacementPartType = exports.PartType = exports.LanguageCode = exports.InstructionPartType = exports.DealerSupportHubStatus = exports.DealerCase = exports.CommunicationProtocol = exports.CaseType = exports.CaseManagementStatus = exports.BundlePartType = exports.AdditionalBundlePartType = exports.ActivityHistoryName = void 0;
exports.ZendeskApi = exports.ZendeskApiFactory = exports.ZendeskApiFp = exports.ZendeskApiAxiosParamCreator = exports.PostBundleApi = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
exports.ActivityHistoryName = {
    PartReplacement: 'part_replacement',
    BootloaderRescued: 'bootloader_rescued',
    MidParameterUpdate: 'mid_parameter_update',
    FirmwareUpdate: 'firmware_update',
    ErrorCodeResolved: 'error_code_resolved',
    ParameterUpdate: 'parameter_update',
    DiagnosisResolved: 'diagnosis_resolved',
    ParameterCompare: 'parameter_compare',
    BikeActivate: 'bike_activate',
    BikeDiagnosis: 'bike_diagnosis',
    BikeConnected: 'bike_connected'
};
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
exports.AdditionalBundlePartType = {
    FrontLight: 'front_light',
    RearLight: 'rear_light'
};
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
exports.BundlePartType = {
    Hmi: 'hmi',
    Display: 'display',
    Controller: 'controller',
    Battery: 'battery',
    Motor: 'motor',
    CenterMotor: 'center_motor',
    Torque: 'torque',
    Derailleur: 'derailleur',
    Throttle: 'throttle',
    Charger: 'charger',
    RangeExtenderBattery: 'range_extender_battery',
    Cadence: 'cadence',
    FrontLight: 'front_light',
    RearLight: 'rear_light'
};
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
exports.CaseManagementStatus = {
    ToDo: 'To-do',
    Processing: 'Processing',
    Approved: 'Approved',
    Completed: 'Completed',
    Rejected: 'Rejected'
};
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
exports.CaseType = {
    PostBundle: 'post_bundle',
    VerifyWorkspace: 'verify_workspace'
};
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
exports.CommunicationProtocol = {
    Hap1: 'hap1',
    Hap2: 'hap2',
    NoCommunication: 'no_communication',
    Uart: 'uart',
    Other: 'other'
};
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
exports.DealerCase = {
    PostBundle: 'post_bundle'
};
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
exports.DealerSupportHubStatus = {
    ToDo: 'to_do',
    Processing: 'processing',
    Approved: 'approved',
    Completed: 'completed',
    Revised: 'revised',
    Rejected: 'rejected'
};
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
exports.InstructionPartType = {
    Brose: 'brose',
    Battery: 'battery',
    Chain: 'chain',
    Console: 'console',
    Controller: 'controller',
    Driver: 'driver',
    Display: 'display',
    FrontLight: 'front_light',
    Hmi: 'hmi',
    Light: 'light',
    Misc: 'misc',
    Motor: 'motor',
    RearLight: 'rear_light',
    SpeedSensor: 'speed_sensor',
    Speed: 'speed',
    Torque: 'torque',
    Throttle: 'throttle'
};
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
exports.LanguageCode = {
    ZhTw: 'zh-tw',
    EnUs: 'en-us',
    De: 'de',
    Fr: 'fr',
    Es: 'es',
    It: 'it',
    Nl: 'nl'
};
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
exports.PartType = {
    Hmi: 'hmi',
    Battery: 'battery',
    Motor: 'motor',
    Controller: 'controller',
    Dongle: 'dongle',
    Torque: 'torque',
    Throttle: 'throttle',
    Lock: 'lock',
    Display: 'display',
    FrontLight: 'front_light',
    RearLight: 'rear_light',
    Derailleur: 'derailleur',
    Cadence: 'cadence',
    Charger: 'charger',
    RangeExtenderBattery: 'range_extender_battery',
    SpeedSensor: 'speed_sensor',
    MotorCore: 'motor_core',
    MidMotor: 'mid_motor'
};
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
exports.ReplacementPartType = {
    Hmi: 'hmi',
    Battery: 'battery',
    Motor: 'motor',
    Controller: 'controller',
    Dongle: 'dongle',
    Torque: 'torque',
    Throttle: 'throttle',
    Lock: 'lock',
    Display: 'display',
    FrontLight: 'front_light',
    RearLight: 'rear_light',
    Derailleur: 'derailleur',
    Cadence: 'cadence',
    Charger: 'charger',
    Speed: 'speed',
    RangeExtenderBattery: 'range_extender_battery'
};
/**
 * ReportedOrganizationEnum
 * @export
 * @enum {string}
 */
exports.ReportedOrganizationEnum = {
    Brand: 'BRAND',
    ServiceCenter: 'SERVICE_CENTER',
    BikeShop: 'BIKE_SHOP'
};
/**
 * ReportedSystem
 * @export
 * @enum {string}
 */
exports.ReportedSystem = {
    Hst: 'HST',
    HstV3: 'HST_V3',
    Hra: 'HRA'
};
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
exports.ReporterRole = {
    Dealer: 'dealer',
    ServiceCenter: 'service_center'
};
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
exports.SpeedLimitOption = {
    _24: 'KM_24',
    _25: 'KM_25',
    _245Full: 'KM_24_5_FULL',
    _25Full: 'KM_25_FULL',
    _29Full: 'KM_29_FULL',
    _32: 'KM_32',
    _45: 'KM_45'
};
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
exports.Status = {
    Enabled: 'enabled',
    Disabled: 'disabled',
    Unconfirmed: 'unconfirmed'
};
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
exports.TaskRule = {
    PartBundleNotMatch: 'part_bundle_not_match',
    PartBundleNotFound: 'part_bundle_not_found',
    MidNotFound: 'mid_not_found',
    IllegalMid: 'illegal_mid',
    VinNotFound: 'vin_not_found',
    FirmwareUpdateAvailable: 'firmware_update_available',
    InBootloader: 'in_bootloader',
    ErrorCodeDanger: 'error_code_danger',
    ErrorCodeWarning: 'error_code_warning',
    ParameterNeedCompare: 'parameter_need_compare',
    ParameterNeedUpdate: 'parameter_need_update',
    MeasurementSpeedError: 'measurement_speed_error',
    PedalTorqueError: 'pedal_torque_error',
    PedalRpmError: 'pedal_rpm_error',
    BundleRuleNotMatch: 'bundle_rule_not_match',
    HmiNeedDiagnosis: 'hmi_need_diagnosis'
};
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
exports.UnitOfLengthOption = {
    Km: 'KM',
    Mi: 'MI'
};
/**
 * AuthApi - axios parameter creator
 * @export
 */
const AuthApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get Invitable Brands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvitableBrands: async (options = {}) => {
            const localVarPath = `/auth/brand/invitable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Invite Dealer Account
         * @param {InviteAccountRequest} inviteAccountRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteDealerAccount: async (inviteAccountRequest, options = {}) => {
            // verify required parameter 'inviteAccountRequest' is not null or undefined
            (0, common_1.assertParamExists)('inviteDealerAccount', 'inviteAccountRequest', inviteAccountRequest);
            const localVarPath = `/auth/invite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(inviteAccountRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query Dealer Account Overview
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [username]
         * @param {Array<number>} [brandIds]
         * @param {Status} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryDealerAccountOverview: async (page, pageSize, username, brandIds, status, options = {}) => {
            const localVarPath = `/auth/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }
            if (brandIds) {
                localVarQueryParameter['brand_ids'] = brandIds;
            }
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Resend Temporary Password
         * @param {BodyResendTemporaryPasswordAuthTemporaryPasswordPost} bodyResendTemporaryPasswordAuthTemporaryPasswordPost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendTemporaryPassword: async (bodyResendTemporaryPasswordAuthTemporaryPasswordPost, options = {}) => {
            // verify required parameter 'bodyResendTemporaryPasswordAuthTemporaryPasswordPost' is not null or undefined
            (0, common_1.assertParamExists)('resendTemporaryPassword', 'bodyResendTemporaryPasswordAuthTemporaryPasswordPost', bodyResendTemporaryPasswordAuthTemporaryPasswordPost);
            const localVarPath = `/auth/temporary_password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(bodyResendTemporaryPasswordAuthTemporaryPasswordPost, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.AuthApiAxiosParamCreator = AuthApiAxiosParamCreator;
/**
 * AuthApi - functional programming interface
 * @export
 */
const AuthApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AuthApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get Invitable Brands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvitableBrands(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInvitableBrands(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['AuthApi.getInvitableBrands']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Invite Dealer Account
         * @param {InviteAccountRequest} inviteAccountRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteDealerAccount(inviteAccountRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inviteDealerAccount(inviteAccountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['AuthApi.inviteDealerAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Query Dealer Account Overview
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [username]
         * @param {Array<number>} [brandIds]
         * @param {Status} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryDealerAccountOverview(page, pageSize, username, brandIds, status, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryDealerAccountOverview(page, pageSize, username, brandIds, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['AuthApi.queryDealerAccountOverview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Resend Temporary Password
         * @param {BodyResendTemporaryPasswordAuthTemporaryPasswordPost} bodyResendTemporaryPasswordAuthTemporaryPasswordPost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resendTemporaryPassword(bodyResendTemporaryPasswordAuthTemporaryPasswordPost, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resendTemporaryPassword(bodyResendTemporaryPasswordAuthTemporaryPasswordPost, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['AuthApi.resendTemporaryPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.AuthApiFp = AuthApiFp;
/**
 * AuthApi - factory interface
 * @export
 */
const AuthApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AuthApiFp)(configuration);
    return {
        /**
         *
         * @summary Get Invitable Brands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvitableBrands(options) {
            return localVarFp.getInvitableBrands(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Invite Dealer Account
         * @param {InviteAccountRequest} inviteAccountRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteDealerAccount(inviteAccountRequest, options) {
            return localVarFp.inviteDealerAccount(inviteAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Query Dealer Account Overview
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [username]
         * @param {Array<number>} [brandIds]
         * @param {Status} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryDealerAccountOverview(page, pageSize, username, brandIds, status, options) {
            return localVarFp.queryDealerAccountOverview(page, pageSize, username, brandIds, status, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Resend Temporary Password
         * @param {BodyResendTemporaryPasswordAuthTemporaryPasswordPost} bodyResendTemporaryPasswordAuthTemporaryPasswordPost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendTemporaryPassword(bodyResendTemporaryPasswordAuthTemporaryPasswordPost, options) {
            return localVarFp.resendTemporaryPassword(bodyResendTemporaryPasswordAuthTemporaryPasswordPost, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AuthApiFactory = AuthApiFactory;
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
class AuthApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get Invitable Brands
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    getInvitableBrands(options) {
        return (0, exports.AuthApiFp)(this.configuration).getInvitableBrands(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Invite Dealer Account
     * @param {InviteAccountRequest} inviteAccountRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    inviteDealerAccount(inviteAccountRequest, options) {
        return (0, exports.AuthApiFp)(this.configuration).inviteDealerAccount(inviteAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Query Dealer Account Overview
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [username]
     * @param {Array<number>} [brandIds]
     * @param {Status} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    queryDealerAccountOverview(page, pageSize, username, brandIds, status, options) {
        return (0, exports.AuthApiFp)(this.configuration).queryDealerAccountOverview(page, pageSize, username, brandIds, status, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Resend Temporary Password
     * @param {BodyResendTemporaryPasswordAuthTemporaryPasswordPost} bodyResendTemporaryPasswordAuthTemporaryPasswordPost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    resendTemporaryPassword(bodyResendTemporaryPasswordAuthTemporaryPasswordPost, options) {
        return (0, exports.AuthApiFp)(this.configuration).resendTemporaryPassword(bodyResendTemporaryPasswordAuthTemporaryPasswordPost, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AuthApi = AuthApi;
/**
 * BikeApi - axios parameter creator
 * @export
 */
const BikeApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get Activity History
         * @param {string} vin
         * @param {string} reportedAtMin
         * @param {string} reportedAtMax
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivityHistory: async (vin, reportedAtMin, reportedAtMax, page, pageSize, options = {}) => {
            // verify required parameter 'vin' is not null or undefined
            (0, common_1.assertParamExists)('getActivityHistory', 'vin', vin);
            // verify required parameter 'reportedAtMin' is not null or undefined
            (0, common_1.assertParamExists)('getActivityHistory', 'reportedAtMin', reportedAtMin);
            // verify required parameter 'reportedAtMax' is not null or undefined
            (0, common_1.assertParamExists)('getActivityHistory', 'reportedAtMax', reportedAtMax);
            const localVarPath = `/bike/{vin}/activity_history`
                .replace(`{${"vin"}}`, encodeURIComponent(String(vin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (reportedAtMin !== undefined) {
                localVarQueryParameter['reported_at_min'] = (reportedAtMin instanceof Date) ?
                    reportedAtMin.toISOString() :
                    reportedAtMin;
            }
            if (reportedAtMax !== undefined) {
                localVarQueryParameter['reported_at_max'] = (reportedAtMax instanceof Date) ?
                    reportedAtMax.toISOString() :
                    reportedAtMax;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Bike Error Code History
         * @param {string} bikeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBikeErrorCodeHistory: async (bikeId, options = {}) => {
            // verify required parameter 'bikeId' is not null or undefined
            (0, common_1.assertParamExists)('getBikeErrorCodeHistory', 'bikeId', bikeId);
            const localVarPath = `/bike/{bike_id}/history/error_code`
                .replace(`{${"bike_id"}}`, encodeURIComponent(String(bikeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Bike Info
         * @param {string} vin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBikeInfo: async (vin, options = {}) => {
            // verify required parameter 'vin' is not null or undefined
            (0, common_1.assertParamExists)('getBikeInfo', 'vin', vin);
            const localVarPath = `/bike/{vin}/info`
                .replace(`{${"vin"}}`, encodeURIComponent(String(vin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Bike Information
         * @param {string} vin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBikeInformation: async (vin, options = {}) => {
            // verify required parameter 'vin' is not null or undefined
            (0, common_1.assertParamExists)('getBikeInformation', 'vin', vin);
            const localVarPath = `/bike/{vin}/information`
                .replace(`{${"vin"}}`, encodeURIComponent(String(vin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Firmware Updates
         * @param {string} bikeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFirmwareUpdates: async (bikeId, options = {}) => {
            // verify required parameter 'bikeId' is not null or undefined
            (0, common_1.assertParamExists)('getFirmwareUpdates', 'bikeId', bikeId);
            const localVarPath = `/bike/{bike_id}/history/firmware_updates`
                .replace(`{${"bike_id"}}`, encodeURIComponent(String(bikeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Part Replacement History
         * @param {string} bikeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartReplacementHistory: async (bikeId, options = {}) => {
            // verify required parameter 'bikeId' is not null or undefined
            (0, common_1.assertParamExists)('getPartReplacementHistory', 'bikeId', bikeId);
            const localVarPath = `/bike/{bike_id}/history/replacement_part`
                .replace(`{${"bike_id"}}`, encodeURIComponent(String(bikeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Unresolved Task History
         * @param {string} vin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnresolvedTaskHistory: async (vin, options = {}) => {
            // verify required parameter 'vin' is not null or undefined
            (0, common_1.assertParamExists)('getUnresolvedTaskHistory', 'vin', vin);
            const localVarPath = `/bike/{vin}/unresolved_task`
                .replace(`{${"vin"}}`, encodeURIComponent(String(vin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.BikeApiAxiosParamCreator = BikeApiAxiosParamCreator;
/**
 * BikeApi - functional programming interface
 * @export
 */
const BikeApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.BikeApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get Activity History
         * @param {string} vin
         * @param {string} reportedAtMin
         * @param {string} reportedAtMax
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActivityHistory(vin, reportedAtMin, reportedAtMax, page, pageSize, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActivityHistory(vin, reportedAtMin, reportedAtMax, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['BikeApi.getActivityHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get Bike Error Code History
         * @param {string} bikeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBikeErrorCodeHistory(bikeId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBikeErrorCodeHistory(bikeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['BikeApi.getBikeErrorCodeHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get Bike Info
         * @param {string} vin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBikeInfo(vin, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBikeInfo(vin, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['BikeApi.getBikeInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get Bike Information
         * @param {string} vin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBikeInformation(vin, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBikeInformation(vin, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['BikeApi.getBikeInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get Firmware Updates
         * @param {string} bikeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFirmwareUpdates(bikeId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFirmwareUpdates(bikeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['BikeApi.getFirmwareUpdates']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get Part Replacement History
         * @param {string} bikeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPartReplacementHistory(bikeId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPartReplacementHistory(bikeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['BikeApi.getPartReplacementHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get Unresolved Task History
         * @param {string} vin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnresolvedTaskHistory(vin, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnresolvedTaskHistory(vin, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['BikeApi.getUnresolvedTaskHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.BikeApiFp = BikeApiFp;
/**
 * BikeApi - factory interface
 * @export
 */
const BikeApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.BikeApiFp)(configuration);
    return {
        /**
         *
         * @summary Get Activity History
         * @param {string} vin
         * @param {string} reportedAtMin
         * @param {string} reportedAtMax
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivityHistory(vin, reportedAtMin, reportedAtMax, page, pageSize, options) {
            return localVarFp.getActivityHistory(vin, reportedAtMin, reportedAtMax, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Bike Error Code History
         * @param {string} bikeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBikeErrorCodeHistory(bikeId, options) {
            return localVarFp.getBikeErrorCodeHistory(bikeId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Bike Info
         * @param {string} vin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBikeInfo(vin, options) {
            return localVarFp.getBikeInfo(vin, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Bike Information
         * @param {string} vin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBikeInformation(vin, options) {
            return localVarFp.getBikeInformation(vin, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Firmware Updates
         * @param {string} bikeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFirmwareUpdates(bikeId, options) {
            return localVarFp.getFirmwareUpdates(bikeId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Part Replacement History
         * @param {string} bikeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartReplacementHistory(bikeId, options) {
            return localVarFp.getPartReplacementHistory(bikeId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Unresolved Task History
         * @param {string} vin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnresolvedTaskHistory(vin, options) {
            return localVarFp.getUnresolvedTaskHistory(vin, options).then((request) => request(axios, basePath));
        },
    };
};
exports.BikeApiFactory = BikeApiFactory;
/**
 * BikeApi - object-oriented interface
 * @export
 * @class BikeApi
 * @extends {BaseAPI}
 */
class BikeApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get Activity History
     * @param {string} vin
     * @param {string} reportedAtMin
     * @param {string} reportedAtMax
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BikeApi
     */
    getActivityHistory(vin, reportedAtMin, reportedAtMax, page, pageSize, options) {
        return (0, exports.BikeApiFp)(this.configuration).getActivityHistory(vin, reportedAtMin, reportedAtMax, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Bike Error Code History
     * @param {string} bikeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BikeApi
     */
    getBikeErrorCodeHistory(bikeId, options) {
        return (0, exports.BikeApiFp)(this.configuration).getBikeErrorCodeHistory(bikeId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Bike Info
     * @param {string} vin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BikeApi
     */
    getBikeInfo(vin, options) {
        return (0, exports.BikeApiFp)(this.configuration).getBikeInfo(vin, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Bike Information
     * @param {string} vin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BikeApi
     */
    getBikeInformation(vin, options) {
        return (0, exports.BikeApiFp)(this.configuration).getBikeInformation(vin, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Firmware Updates
     * @param {string} bikeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BikeApi
     */
    getFirmwareUpdates(bikeId, options) {
        return (0, exports.BikeApiFp)(this.configuration).getFirmwareUpdates(bikeId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Part Replacement History
     * @param {string} bikeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BikeApi
     */
    getPartReplacementHistory(bikeId, options) {
        return (0, exports.BikeApiFp)(this.configuration).getPartReplacementHistory(bikeId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Unresolved Task History
     * @param {string} vin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BikeApi
     */
    getUnresolvedTaskHistory(vin, options) {
        return (0, exports.BikeApiFp)(this.configuration).getUnresolvedTaskHistory(vin, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.BikeApi = BikeApi;
/**
 * BikeSpecApi - axios parameter creator
 * @export
 */
const BikeSpecApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get Bike Spec Bundle Rule
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBikeSpecBundleRule: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getBikeSpecBundleRule', 'id', id);
            const localVarPath = `/bike_spec/{id}/bundle_rule`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Bike Spec List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBikeSpecList: async (options = {}) => {
            const localVarPath = `/bike_spec/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.BikeSpecApiAxiosParamCreator = BikeSpecApiAxiosParamCreator;
/**
 * BikeSpecApi - functional programming interface
 * @export
 */
const BikeSpecApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.BikeSpecApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get Bike Spec Bundle Rule
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBikeSpecBundleRule(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBikeSpecBundleRule(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['BikeSpecApi.getBikeSpecBundleRule']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get Bike Spec List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBikeSpecList(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBikeSpecList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['BikeSpecApi.getBikeSpecList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.BikeSpecApiFp = BikeSpecApiFp;
/**
 * BikeSpecApi - factory interface
 * @export
 */
const BikeSpecApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.BikeSpecApiFp)(configuration);
    return {
        /**
         *
         * @summary Get Bike Spec Bundle Rule
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBikeSpecBundleRule(id, options) {
            return localVarFp.getBikeSpecBundleRule(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Bike Spec List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBikeSpecList(options) {
            return localVarFp.getBikeSpecList(options).then((request) => request(axios, basePath));
        },
    };
};
exports.BikeSpecApiFactory = BikeSpecApiFactory;
/**
 * BikeSpecApi - object-oriented interface
 * @export
 * @class BikeSpecApi
 * @extends {BaseAPI}
 */
class BikeSpecApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get Bike Spec Bundle Rule
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BikeSpecApi
     */
    getBikeSpecBundleRule(id, options) {
        return (0, exports.BikeSpecApiFp)(this.configuration).getBikeSpecBundleRule(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Bike Spec List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BikeSpecApi
     */
    getBikeSpecList(options) {
        return (0, exports.BikeSpecApiFp)(this.configuration).getBikeSpecList(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.BikeSpecApi = BikeSpecApi;
/**
 * CaseManagementApi - axios parameter creator
 * @export
 */
const CaseManagementApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get Case Management List
         * @param {CaseType} caseType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseManagementList: async (caseType, options = {}) => {
            // verify required parameter 'caseType' is not null or undefined
            (0, common_1.assertParamExists)('getCaseManagementList', 'caseType', caseType);
            const localVarPath = `/case_management/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (caseType !== undefined) {
                localVarQueryParameter['case_type'] = caseType;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Post Bundle Case By Id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostBundleCaseById: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getPostBundleCaseById', 'id', id);
            const localVarPath = `/case_management/{id}/post_bundle`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Verify Workspace Case By Id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVerifyWorkspaceCaseById: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getVerifyWorkspaceCaseById', 'id', id);
            const localVarPath = `/case_management/{id}/verify_workspace`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Handle Post Bundle Case
         * @param {string} id
         * @param {UpdatePostBundleRequest} updatePostBundleRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlePostBundleCase: async (id, updatePostBundleRequest, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('handlePostBundleCase', 'id', id);
            // verify required parameter 'updatePostBundleRequest' is not null or undefined
            (0, common_1.assertParamExists)('handlePostBundleCase', 'updatePostBundleRequest', updatePostBundleRequest);
            const localVarPath = `/case_management/{id}/post_bundle/handle`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updatePostBundleRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Handle Verify Workspace Case
         * @param {string} id
         * @param {UpdateVerifyWorkspaceRequest} updateVerifyWorkspaceRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleVerifyWorkspaceCase: async (id, updateVerifyWorkspaceRequest, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('handleVerifyWorkspaceCase', 'id', id);
            // verify required parameter 'updateVerifyWorkspaceRequest' is not null or undefined
            (0, common_1.assertParamExists)('handleVerifyWorkspaceCase', 'updateVerifyWorkspaceRequest', updateVerifyWorkspaceRequest);
            const localVarPath = `/case_management/{id}/verify_workspace/handle`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateVerifyWorkspaceRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update Post Bundle Case
         * @param {string} id
         * @param {UpdatePostBundleRequest} updatePostBundleRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePostBundleCase: async (id, updatePostBundleRequest, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updatePostBundleCase', 'id', id);
            // verify required parameter 'updatePostBundleRequest' is not null or undefined
            (0, common_1.assertParamExists)('updatePostBundleCase', 'updatePostBundleRequest', updatePostBundleRequest);
            const localVarPath = `/case_management/{id}/post_bundle`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updatePostBundleRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.CaseManagementApiAxiosParamCreator = CaseManagementApiAxiosParamCreator;
/**
 * CaseManagementApi - functional programming interface
 * @export
 */
const CaseManagementApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.CaseManagementApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get Case Management List
         * @param {CaseType} caseType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCaseManagementList(caseType, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCaseManagementList(caseType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['CaseManagementApi.getCaseManagementList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get Post Bundle Case By Id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostBundleCaseById(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostBundleCaseById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['CaseManagementApi.getPostBundleCaseById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get Verify Workspace Case By Id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVerifyWorkspaceCaseById(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVerifyWorkspaceCaseById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['CaseManagementApi.getVerifyWorkspaceCaseById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Handle Post Bundle Case
         * @param {string} id
         * @param {UpdatePostBundleRequest} updatePostBundleRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handlePostBundleCase(id, updatePostBundleRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.handlePostBundleCase(id, updatePostBundleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['CaseManagementApi.handlePostBundleCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Handle Verify Workspace Case
         * @param {string} id
         * @param {UpdateVerifyWorkspaceRequest} updateVerifyWorkspaceRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleVerifyWorkspaceCase(id, updateVerifyWorkspaceRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.handleVerifyWorkspaceCase(id, updateVerifyWorkspaceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['CaseManagementApi.handleVerifyWorkspaceCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update Post Bundle Case
         * @param {string} id
         * @param {UpdatePostBundleRequest} updatePostBundleRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePostBundleCase(id, updatePostBundleRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePostBundleCase(id, updatePostBundleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['CaseManagementApi.updatePostBundleCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.CaseManagementApiFp = CaseManagementApiFp;
/**
 * CaseManagementApi - factory interface
 * @export
 */
const CaseManagementApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.CaseManagementApiFp)(configuration);
    return {
        /**
         *
         * @summary Get Case Management List
         * @param {CaseType} caseType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCaseManagementList(caseType, options) {
            return localVarFp.getCaseManagementList(caseType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Post Bundle Case By Id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostBundleCaseById(id, options) {
            return localVarFp.getPostBundleCaseById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Verify Workspace Case By Id
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVerifyWorkspaceCaseById(id, options) {
            return localVarFp.getVerifyWorkspaceCaseById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Handle Post Bundle Case
         * @param {string} id
         * @param {UpdatePostBundleRequest} updatePostBundleRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlePostBundleCase(id, updatePostBundleRequest, options) {
            return localVarFp.handlePostBundleCase(id, updatePostBundleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Handle Verify Workspace Case
         * @param {string} id
         * @param {UpdateVerifyWorkspaceRequest} updateVerifyWorkspaceRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleVerifyWorkspaceCase(id, updateVerifyWorkspaceRequest, options) {
            return localVarFp.handleVerifyWorkspaceCase(id, updateVerifyWorkspaceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update Post Bundle Case
         * @param {string} id
         * @param {UpdatePostBundleRequest} updatePostBundleRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePostBundleCase(id, updatePostBundleRequest, options) {
            return localVarFp.updatePostBundleCase(id, updatePostBundleRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.CaseManagementApiFactory = CaseManagementApiFactory;
/**
 * CaseManagementApi - object-oriented interface
 * @export
 * @class CaseManagementApi
 * @extends {BaseAPI}
 */
class CaseManagementApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get Case Management List
     * @param {CaseType} caseType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseManagementApi
     */
    getCaseManagementList(caseType, options) {
        return (0, exports.CaseManagementApiFp)(this.configuration).getCaseManagementList(caseType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Post Bundle Case By Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseManagementApi
     */
    getPostBundleCaseById(id, options) {
        return (0, exports.CaseManagementApiFp)(this.configuration).getPostBundleCaseById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Verify Workspace Case By Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseManagementApi
     */
    getVerifyWorkspaceCaseById(id, options) {
        return (0, exports.CaseManagementApiFp)(this.configuration).getVerifyWorkspaceCaseById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Handle Post Bundle Case
     * @param {string} id
     * @param {UpdatePostBundleRequest} updatePostBundleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseManagementApi
     */
    handlePostBundleCase(id, updatePostBundleRequest, options) {
        return (0, exports.CaseManagementApiFp)(this.configuration).handlePostBundleCase(id, updatePostBundleRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Handle Verify Workspace Case
     * @param {string} id
     * @param {UpdateVerifyWorkspaceRequest} updateVerifyWorkspaceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseManagementApi
     */
    handleVerifyWorkspaceCase(id, updateVerifyWorkspaceRequest, options) {
        return (0, exports.CaseManagementApiFp)(this.configuration).handleVerifyWorkspaceCase(id, updateVerifyWorkspaceRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update Post Bundle Case
     * @param {string} id
     * @param {UpdatePostBundleRequest} updatePostBundleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseManagementApi
     */
    updatePostBundleCase(id, updatePostBundleRequest, options) {
        return (0, exports.CaseManagementApiFp)(this.configuration).updatePostBundleCase(id, updatePostBundleRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CaseManagementApi = CaseManagementApi;
/**
 * DealerSupportHubApi - axios parameter creator
 * @export
 */
const DealerSupportHubApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get Dealer Support Hub By Id
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDealerSupportHubById: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getDealerSupportHubById', 'id', id);
            const localVarPath = `/dealer_support_hub/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Dealer Support Hub List
         * @param {DealerCase} [_case]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDealerSupportHubList: async (_case, options = {}) => {
            const localVarPath = `/dealer_support_hub`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (_case !== undefined) {
                localVarQueryParameter['case'] = _case;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Handle Dealer Support Hub
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleDealerSupportHub: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('handleDealerSupportHub', 'id', id);
            const localVarPath = `/dealer_support_hub/{id}/handle_case`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update Dealer Support Hub
         * @param {number} id
         * @param {UpdateDealerSupportHubRequest} updateDealerSupportHubRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDealerSupportHub: async (id, updateDealerSupportHubRequest, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updateDealerSupportHub', 'id', id);
            // verify required parameter 'updateDealerSupportHubRequest' is not null or undefined
            (0, common_1.assertParamExists)('updateDealerSupportHub', 'updateDealerSupportHubRequest', updateDealerSupportHubRequest);
            const localVarPath = `/dealer_support_hub/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateDealerSupportHubRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DealerSupportHubApiAxiosParamCreator = DealerSupportHubApiAxiosParamCreator;
/**
 * DealerSupportHubApi - functional programming interface
 * @export
 */
const DealerSupportHubApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DealerSupportHubApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get Dealer Support Hub By Id
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDealerSupportHubById(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealerSupportHubById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DealerSupportHubApi.getDealerSupportHubById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get Dealer Support Hub List
         * @param {DealerCase} [_case]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDealerSupportHubList(_case, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDealerSupportHubList(_case, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DealerSupportHubApi.getDealerSupportHubList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Handle Dealer Support Hub
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleDealerSupportHub(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.handleDealerSupportHub(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DealerSupportHubApi.handleDealerSupportHub']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update Dealer Support Hub
         * @param {number} id
         * @param {UpdateDealerSupportHubRequest} updateDealerSupportHubRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDealerSupportHub(id, updateDealerSupportHubRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDealerSupportHub(id, updateDealerSupportHubRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DealerSupportHubApi.updateDealerSupportHub']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.DealerSupportHubApiFp = DealerSupportHubApiFp;
/**
 * DealerSupportHubApi - factory interface
 * @export
 */
const DealerSupportHubApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DealerSupportHubApiFp)(configuration);
    return {
        /**
         *
         * @summary Get Dealer Support Hub By Id
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDealerSupportHubById(id, options) {
            return localVarFp.getDealerSupportHubById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Dealer Support Hub List
         * @param {DealerCase} [_case]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDealerSupportHubList(_case, options) {
            return localVarFp.getDealerSupportHubList(_case, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Handle Dealer Support Hub
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleDealerSupportHub(id, options) {
            return localVarFp.handleDealerSupportHub(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update Dealer Support Hub
         * @param {number} id
         * @param {UpdateDealerSupportHubRequest} updateDealerSupportHubRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDealerSupportHub(id, updateDealerSupportHubRequest, options) {
            return localVarFp.updateDealerSupportHub(id, updateDealerSupportHubRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.DealerSupportHubApiFactory = DealerSupportHubApiFactory;
/**
 * DealerSupportHubApi - object-oriented interface
 * @export
 * @class DealerSupportHubApi
 * @extends {BaseAPI}
 */
class DealerSupportHubApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get Dealer Support Hub By Id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealerSupportHubApi
     */
    getDealerSupportHubById(id, options) {
        return (0, exports.DealerSupportHubApiFp)(this.configuration).getDealerSupportHubById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Dealer Support Hub List
     * @param {DealerCase} [_case]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealerSupportHubApi
     */
    getDealerSupportHubList(_case, options) {
        return (0, exports.DealerSupportHubApiFp)(this.configuration).getDealerSupportHubList(_case, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Handle Dealer Support Hub
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealerSupportHubApi
     */
    handleDealerSupportHub(id, options) {
        return (0, exports.DealerSupportHubApiFp)(this.configuration).handleDealerSupportHub(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update Dealer Support Hub
     * @param {number} id
     * @param {UpdateDealerSupportHubRequest} updateDealerSupportHubRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealerSupportHubApi
     */
    updateDealerSupportHub(id, updateDealerSupportHubRequest, options) {
        return (0, exports.DealerSupportHubApiFp)(this.configuration).updateDealerSupportHub(id, updateDealerSupportHubRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DealerSupportHubApi = DealerSupportHubApi;
/**
 * EnumerationApi - axios parameter creator
 * @export
 */
const EnumerationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get Bike Shop List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBikeShopList: async (options = {}) => {
            const localVarPath = `/enumeration/bike_shop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Brand List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandList: async (options = {}) => {
            const localVarPath = `/enumeration/brand`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Part Spec List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartSpecList: async (options = {}) => {
            const localVarPath = `/enumeration/part_spec`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Service Center List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceCenterList: async (options = {}) => {
            const localVarPath = `/enumeration/service_center`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.EnumerationApiAxiosParamCreator = EnumerationApiAxiosParamCreator;
/**
 * EnumerationApi - functional programming interface
 * @export
 */
const EnumerationApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.EnumerationApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get Bike Shop List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBikeShopList(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBikeShopList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['EnumerationApi.getBikeShopList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get Brand List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrandList(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrandList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['EnumerationApi.getBrandList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get Part Spec List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPartSpecList(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPartSpecList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['EnumerationApi.getPartSpecList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get Service Center List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceCenterList(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceCenterList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['EnumerationApi.getServiceCenterList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.EnumerationApiFp = EnumerationApiFp;
/**
 * EnumerationApi - factory interface
 * @export
 */
const EnumerationApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.EnumerationApiFp)(configuration);
    return {
        /**
         *
         * @summary Get Bike Shop List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBikeShopList(options) {
            return localVarFp.getBikeShopList(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Brand List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandList(options) {
            return localVarFp.getBrandList(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Part Spec List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartSpecList(options) {
            return localVarFp.getPartSpecList(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Service Center List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceCenterList(options) {
            return localVarFp.getServiceCenterList(options).then((request) => request(axios, basePath));
        },
    };
};
exports.EnumerationApiFactory = EnumerationApiFactory;
/**
 * EnumerationApi - object-oriented interface
 * @export
 * @class EnumerationApi
 * @extends {BaseAPI}
 */
class EnumerationApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get Bike Shop List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumerationApi
     */
    getBikeShopList(options) {
        return (0, exports.EnumerationApiFp)(this.configuration).getBikeShopList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Brand List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumerationApi
     */
    getBrandList(options) {
        return (0, exports.EnumerationApiFp)(this.configuration).getBrandList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Part Spec List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumerationApi
     */
    getPartSpecList(options) {
        return (0, exports.EnumerationApiFp)(this.configuration).getPartSpecList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Service Center List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumerationApi
     */
    getServiceCenterList(options) {
        return (0, exports.EnumerationApiFp)(this.configuration).getServiceCenterList(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.EnumerationApi = EnumerationApi;
/**
 * InstructionApi - axios parameter creator
 * @export
 */
const InstructionApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * will be removed
         * @summary Get
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        get: async (options = {}) => {
            const localVarPath = `/instruction/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Instruction I18N
         * @param {LanguageCode} language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstructionI18n: async (language, options = {}) => {
            // verify required parameter 'language' is not null or undefined
            (0, common_1.assertParamExists)('getInstructionI18n', 'language', language);
            const localVarPath = `/instruction/split_procedure`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.InstructionApiAxiosParamCreator = InstructionApiAxiosParamCreator;
/**
 * InstructionApi - functional programming interface
 * @export
 */
const InstructionApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.InstructionApiAxiosParamCreator)(configuration);
    return {
        /**
         * will be removed
         * @summary Get
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async get(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['InstructionApi.get']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get Instruction I18N
         * @param {LanguageCode} language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstructionI18n(language, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstructionI18n(language, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['InstructionApi.getInstructionI18n']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.InstructionApiFp = InstructionApiFp;
/**
 * InstructionApi - factory interface
 * @export
 */
const InstructionApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.InstructionApiFp)(configuration);
    return {
        /**
         * will be removed
         * @summary Get
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        get(options) {
            return localVarFp.get(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Instruction I18N
         * @param {LanguageCode} language
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstructionI18n(language, options) {
            return localVarFp.getInstructionI18n(language, options).then((request) => request(axios, basePath));
        },
    };
};
exports.InstructionApiFactory = InstructionApiFactory;
/**
 * InstructionApi - object-oriented interface
 * @export
 * @class InstructionApi
 * @extends {BaseAPI}
 */
class InstructionApi extends base_1.BaseAPI {
    /**
     * will be removed
     * @summary Get
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof InstructionApi
     */
    get(options) {
        return (0, exports.InstructionApiFp)(this.configuration).get(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Instruction I18N
     * @param {LanguageCode} language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstructionApi
     */
    getInstructionI18n(language, options) {
        return (0, exports.InstructionApiFp)(this.configuration).getInstructionI18n(language, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.InstructionApi = InstructionApi;
/**
 * PostBundleApi - axios parameter creator
 * @export
 */
const PostBundleApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create Product Bike By Post Bundle Bike
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductBikeByPostBundleBike: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('createProductBikeByPostBundleBike', 'id', id);
            const localVarPath = `/dealer_support_hub/{id}/post_bundle/bike`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Post Bundle By Dealer Support Hub By Id
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostBundleByDealerSupportHubById: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getPostBundleByDealerSupportHubById', 'id', id);
            const localVarPath = `/dealer_support_hub/{id}/post_bundle`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Post Bundle By Verify Code
         * @param {string} verifyCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostBundleByVerifyCode: async (verifyCode, options = {}) => {
            // verify required parameter 'verifyCode' is not null or undefined
            (0, common_1.assertParamExists)('getPostBundleByVerifyCode', 'verifyCode', verifyCode);
            const localVarPath = `/dealer_support_hub/post_bundle/verify_code/{verify_code}`
                .replace(`{${"verify_code"}}`, encodeURIComponent(String(verifyCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Post Bundle Overview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostBundleOverview: async (options = {}) => {
            const localVarPath = `/dealer_support_hub/post_bundle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update Post Bundle
         * @param {number} id
         * @param {OldUpdatePostBundleRequest} oldUpdatePostBundleRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePostBundle: async (id, oldUpdatePostBundleRequest, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('updatePostBundle', 'id', id);
            // verify required parameter 'oldUpdatePostBundleRequest' is not null or undefined
            (0, common_1.assertParamExists)('updatePostBundle', 'oldUpdatePostBundleRequest', oldUpdatePostBundleRequest);
            const localVarPath = `/dealer_support_hub/{id}/post_bundle`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(oldUpdatePostBundleRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PostBundleApiAxiosParamCreator = PostBundleApiAxiosParamCreator;
/**
 * PostBundleApi - functional programming interface
 * @export
 */
const PostBundleApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PostBundleApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create Product Bike By Post Bundle Bike
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProductBikeByPostBundleBike(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProductBikeByPostBundleBike(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['PostBundleApi.createProductBikeByPostBundleBike']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get Post Bundle By Dealer Support Hub By Id
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostBundleByDealerSupportHubById(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostBundleByDealerSupportHubById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['PostBundleApi.getPostBundleByDealerSupportHubById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get Post Bundle By Verify Code
         * @param {string} verifyCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostBundleByVerifyCode(verifyCode, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostBundleByVerifyCode(verifyCode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['PostBundleApi.getPostBundleByVerifyCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get Post Bundle Overview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostBundleOverview(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostBundleOverview(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['PostBundleApi.getPostBundleOverview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Update Post Bundle
         * @param {number} id
         * @param {OldUpdatePostBundleRequest} oldUpdatePostBundleRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePostBundle(id, oldUpdatePostBundleRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePostBundle(id, oldUpdatePostBundleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['PostBundleApi.updatePostBundle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.PostBundleApiFp = PostBundleApiFp;
/**
 * PostBundleApi - factory interface
 * @export
 */
const PostBundleApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PostBundleApiFp)(configuration);
    return {
        /**
         *
         * @summary Create Product Bike By Post Bundle Bike
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductBikeByPostBundleBike(id, options) {
            return localVarFp.createProductBikeByPostBundleBike(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Post Bundle By Dealer Support Hub By Id
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostBundleByDealerSupportHubById(id, options) {
            return localVarFp.getPostBundleByDealerSupportHubById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Post Bundle By Verify Code
         * @param {string} verifyCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostBundleByVerifyCode(verifyCode, options) {
            return localVarFp.getPostBundleByVerifyCode(verifyCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Post Bundle Overview
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostBundleOverview(options) {
            return localVarFp.getPostBundleOverview(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update Post Bundle
         * @param {number} id
         * @param {OldUpdatePostBundleRequest} oldUpdatePostBundleRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePostBundle(id, oldUpdatePostBundleRequest, options) {
            return localVarFp.updatePostBundle(id, oldUpdatePostBundleRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PostBundleApiFactory = PostBundleApiFactory;
/**
 * PostBundleApi - object-oriented interface
 * @export
 * @class PostBundleApi
 * @extends {BaseAPI}
 */
class PostBundleApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create Product Bike By Post Bundle Bike
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostBundleApi
     */
    createProductBikeByPostBundleBike(id, options) {
        return (0, exports.PostBundleApiFp)(this.configuration).createProductBikeByPostBundleBike(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Post Bundle By Dealer Support Hub By Id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostBundleApi
     */
    getPostBundleByDealerSupportHubById(id, options) {
        return (0, exports.PostBundleApiFp)(this.configuration).getPostBundleByDealerSupportHubById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Post Bundle By Verify Code
     * @param {string} verifyCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostBundleApi
     */
    getPostBundleByVerifyCode(verifyCode, options) {
        return (0, exports.PostBundleApiFp)(this.configuration).getPostBundleByVerifyCode(verifyCode, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Post Bundle Overview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostBundleApi
     */
    getPostBundleOverview(options) {
        return (0, exports.PostBundleApiFp)(this.configuration).getPostBundleOverview(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update Post Bundle
     * @param {number} id
     * @param {OldUpdatePostBundleRequest} oldUpdatePostBundleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostBundleApi
     */
    updatePostBundle(id, oldUpdatePostBundleRequest, options) {
        return (0, exports.PostBundleApiFp)(this.configuration).updatePostBundle(id, oldUpdatePostBundleRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PostBundleApi = PostBundleApi;
/**
 * ZendeskApi - axios parameter creator
 * @export
 */
const ZendeskApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get Category List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryList: async (options = {}) => {
            const localVarPath = `/zendesk/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query Articles By Category
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryArticlesByCategory: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('queryArticlesByCategory', 'id', id);
            const localVarPath = `/zendesk/category/{id}/article`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Authorization required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ZendeskApiAxiosParamCreator = ZendeskApiAxiosParamCreator;
/**
 * ZendeskApi - functional programming interface
 * @export
 */
const ZendeskApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ZendeskApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get Category List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoryList(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategoryList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ZendeskApi.getCategoryList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Query Articles By Category
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryArticlesByCategory(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryArticlesByCategory(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ZendeskApi.queryArticlesByCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.ZendeskApiFp = ZendeskApiFp;
/**
 * ZendeskApi - factory interface
 * @export
 */
const ZendeskApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ZendeskApiFp)(configuration);
    return {
        /**
         *
         * @summary Get Category List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryList(options) {
            return localVarFp.getCategoryList(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Query Articles By Category
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryArticlesByCategory(id, options) {
            return localVarFp.queryArticlesByCategory(id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ZendeskApiFactory = ZendeskApiFactory;
/**
 * ZendeskApi - object-oriented interface
 * @export
 * @class ZendeskApi
 * @extends {BaseAPI}
 */
class ZendeskApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get Category List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZendeskApi
     */
    getCategoryList(options) {
        return (0, exports.ZendeskApiFp)(this.configuration).getCategoryList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Query Articles By Category
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZendeskApi
     */
    queryArticlesByCategory(id, options) {
        return (0, exports.ZendeskApiFp)(this.configuration).queryArticlesByCategory(id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ZendeskApi = ZendeskApi;
