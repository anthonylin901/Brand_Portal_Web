/**
 * Brand Portal System
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface ActivityHistoryInBikeEvent
 */
export interface ActivityHistoryInBikeEvent {
    /**
     *
     * @type {ActivityHistoryName}
     * @memberof ActivityHistoryInBikeEvent
     */
    'name': ActivityHistoryName;
    /**
     *
     * @type {string}
     * @memberof ActivityHistoryInBikeEvent
     */
    'target'?: string;
    /**
     *
     * @type {object}
     * @memberof ActivityHistoryInBikeEvent
     */
    'context'?: object;
    /**
     *
     * @type {ReportedSystem}
     * @memberof ActivityHistoryInBikeEvent
     */
    'platform': ReportedSystem;
    /**
     *
     * @type {OrganizationInfo}
     * @memberof ActivityHistoryInBikeEvent
     */
    'organization'?: OrganizationInfo;
    /**
     *
     * @type {string}
     * @memberof ActivityHistoryInBikeEvent
     */
    'updated_at': string;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare const ActivityHistoryName: {
    readonly PartReplacement: "part_replacement";
    readonly BootloaderRescued: "bootloader_rescued";
    readonly MidParameterUpdate: "mid_parameter_update";
    readonly FirmwareUpdate: "firmware_update";
    readonly ErrorCodeResolved: "error_code_resolved";
    readonly ParameterUpdate: "parameter_update";
    readonly DiagnosisResolved: "diagnosis_resolved";
    readonly ParameterCompare: "parameter_compare";
    readonly BikeActivate: "bike_activate";
    readonly BikeDiagnosis: "bike_diagnosis";
    readonly BikeConnected: "bike_connected";
};
export type ActivityHistoryName = typeof ActivityHistoryName[keyof typeof ActivityHistoryName];
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare const AdditionalBundlePartType: {
    readonly FrontLight: "front_light";
    readonly RearLight: "rear_light";
};
export type AdditionalBundlePartType = typeof AdditionalBundlePartType[keyof typeof AdditionalBundlePartType];
/**
 *
 * @export
 * @interface AssemblyFactory
 */
export interface AssemblyFactory {
    /**
     *
     * @type {number}
     * @memberof AssemblyFactory
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof AssemblyFactory
     */
    'name': string;
    /**
     *
     * @type {boolean}
     * @memberof AssemblyFactory
     */
    'is_post_bundle': boolean;
}
/**
 *
 * @export
 * @interface BarcodePartPartSpec
 */
export interface BarcodePartPartSpec {
    /**
     *
     * @type {string}
     * @memberof BarcodePartPartSpec
     */
    'part_spec_id': string;
    /**
     *
     * @type {Array<BarcodeRule>}
     * @memberof BarcodePartPartSpec
     */
    'barcode_rules': Array<BarcodeRule>;
}
/**
 *
 * @export
 * @interface BarcodePartSpecs
 */
export interface BarcodePartSpecs {
    /**
     *
     * @type {BundlePartType}
     * @memberof BarcodePartSpecs
     */
    'bundle_part_type': BundlePartType;
    /**
     *
     * @type {Array<BarcodePartPartSpec>}
     * @memberof BarcodePartSpecs
     */
    'part_spec_list': Array<BarcodePartPartSpec>;
}
/**
 *
 * @export
 * @interface BarcodePartSpecsV2
 */
export interface BarcodePartSpecsV2 {
    /**
     *
     * @type {PartType}
     * @memberof BarcodePartSpecsV2
     */
    'bundle_part_type': PartType;
    /**
     *
     * @type {Array<string>}
     * @memberof BarcodePartSpecsV2
     */
    'part_spec_ids': Array<string>;
}
/**
 *
 * @export
 * @interface BarcodeRule
 */
export interface BarcodeRule {
    /**
     *
     * @type {string}
     * @memberof BarcodeRule
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof BarcodeRule
     */
    'regular_expression': string;
    /**
     *
     * @type {string}
     * @memberof BarcodeRule
     */
    'description': string;
}
/**
 *
 * @export
 * @interface Bike
 */
export interface Bike {
    /**
     *
     * @type {string}
     * @memberof Bike
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Bike
     */
    'vin': string;
    /**
     *
     * @type {string}
     * @memberof Bike
     */
    'registered_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Bike
     */
    'assembled_at': string;
    /**
     *
     * @type {Array<BundlePart>}
     * @memberof Bike
     */
    'latest_bundle': Array<BundlePart>;
    /**
     *
     * @type {Array<BundlePart>}
     * @memberof Bike
     */
    'production_bundle': Array<BundlePart>;
    /**
     *
     * @type {BikeModel}
     * @memberof Bike
     */
    'model': BikeModel;
    /**
     *
     * @type {AssemblyFactory}
     * @memberof Bike
     */
    'assembly_factory': AssemblyFactory;
}
/**
 *
 * @export
 * @interface BikeBundlePart
 */
export interface BikeBundlePart {
    /**
     *
     * @type {Array<BrandPortalApiSchemaDealerSupportHubBarcodePart>}
     * @memberof BikeBundlePart
     */
    'barcode_parts': Array<BrandPortalApiSchemaDealerSupportHubBarcodePart>;
    /**
     *
     * @type {Array<AdditionalBundlePartType>}
     * @memberof BikeBundlePart
     */
    'additional_parts': Array<AdditionalBundlePartType>;
    /**
     *
     * @type {Array<BrandPortalApiSchemaDealerSupportHubProtocolPart>}
     * @memberof BikeBundlePart
     */
    'protocol_parts': Array<BrandPortalApiSchemaDealerSupportHubProtocolPart>;
}
/**
 *
 * @export
 * @interface BikeErrorCodeHistoryInHMI
 */
export interface BikeErrorCodeHistoryInHMI {
    /**
     *
     * @type {string}
     * @memberof BikeErrorCodeHistoryInHMI
     */
    'reported_at': string;
    /**
     *
     * @type {Array<ErrorCode>}
     * @memberof BikeErrorCodeHistoryInHMI
     */
    'codes': Array<ErrorCode>;
}
/**
 *
 * @export
 * @interface BikeErrorHistory
 */
export interface BikeErrorHistory {
    /**
     *
     * @type {string}
     * @memberof BikeErrorHistory
     */
    'datetime': string;
    /**
     *
     * @type {Array<number>}
     * @memberof BikeErrorHistory
     */
    'error_codes': Array<number>;
}
/**
 *
 * @export
 * @interface BikeInformation
 */
export interface BikeInformation {
    /**
     *
     * @type {string}
     * @memberof BikeInformation
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BikeInformation
     */
    'vin': string;
    /**
     *
     * @type {BikeModelV2}
     * @memberof BikeInformation
     */
    'model': BikeModelV2;
    /**
     *
     * @type {string}
     * @memberof BikeInformation
     */
    'registered_at'?: string;
    /**
     *
     * @type {string}
     * @memberof BikeInformation
     */
    'assembled_at': string;
    /**
     *
     * @type {BundlePartV2}
     * @memberof BikeInformation
     */
    'latest_bundle': BundlePartV2;
    /**
     *
     * @type {BundlePartV2}
     * @memberof BikeInformation
     */
    'production_bundle': BundlePartV2;
    /**
     *
     * @type {AssemblyFactory}
     * @memberof BikeInformation
     */
    'assembly_factory': AssemblyFactory;
    /**
     *
     * @type {BikeErrorCodeHistoryInHMI}
     * @memberof BikeInformation
     */
    'error_code_in_hmi'?: BikeErrorCodeHistoryInHMI;
}
/**
 *
 * @export
 * @interface BikeModel
 */
export interface BikeModel {
    /**
     *
     * @type {number}
     * @memberof BikeModel
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof BikeModel
     */
    'name': string;
    /**
     *
     * @type {BikeModelSetting}
     * @memberof BikeModel
     */
    'setting': BikeModelSetting;
    /**
     *
     * @type {string}
     * @memberof BikeModel
     */
    'image_url'?: string;
    /**
     *
     * @type {Array<BundleRulePart>}
     * @memberof BikeModel
     */
    'bundle_rule': Array<BundleRulePart>;
}
/**
 *
 * @export
 * @interface BikeModelSetting
 */
export interface BikeModelSetting {
    /**
     *
     * @type {SpeedLimitOption}
     * @memberof BikeModelSetting
     */
    'speed_limit'?: SpeedLimitOption;
    /**
     *
     * @type {UnitOfLengthOption}
     * @memberof BikeModelSetting
     */
    'unit_of_length'?: UnitOfLengthOption;
}
/**
 *
 * @export
 * @interface BikeModelV2
 */
export interface BikeModelV2 {
    /**
     *
     * @type {number}
     * @memberof BikeModelV2
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof BikeModelV2
     */
    'name': string;
    /**
     *
     * @type {BikeModelSetting}
     * @memberof BikeModelV2
     */
    'settings': BikeModelSetting;
    /**
     *
     * @type {string}
     * @memberof BikeModelV2
     */
    'image_url'?: string;
    /**
     *
     * @type {Array<BundleRuleV2>}
     * @memberof BikeModelV2
     */
    'bundle_rule': Array<BundleRuleV2>;
}
/**
 *
 * @export
 * @interface BikeSpec
 */
export interface BikeSpec {
    /**
     *
     * @type {number}
     * @memberof BikeSpec
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof BikeSpec
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof BikeSpec
     */
    'brand_id': number;
    /**
     *
     * @type {number}
     * @memberof BikeSpec
     */
    'barcode_rule_set_id': number;
    /**
     *
     * @type {string}
     * @memberof BikeSpec
     */
    'image_url'?: string;
}
/**
 *
 * @export
 * @interface BodyResendTemporaryPasswordAuthTemporaryPasswordPost
 */
export interface BodyResendTemporaryPasswordAuthTemporaryPasswordPost {
    /**
     *
     * @type {string}
     * @memberof BodyResendTemporaryPasswordAuthTemporaryPasswordPost
     */
    'email': string;
}
/**
 *
 * @export
 * @interface Brand
 */
export interface Brand {
    /**
     *
     * @type {number}
     * @memberof Brand
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Brand
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Brand
     */
    'short_name': string;
    /**
     *
     * @type {boolean}
     * @memberof Brand
     */
    'active': boolean;
}
/**
 *
 * @export
 * @interface BrandPortalApiSchemaBikeBarcodePart
 */
export interface BrandPortalApiSchemaBikeBarcodePart {
    /**
     *
     * @type {string}
     * @memberof BrandPortalApiSchemaBikeBarcodePart
     */
    'part_spec_id'?: string;
    /**
     *
     * @type {string}
     * @memberof BrandPortalApiSchemaBikeBarcodePart
     */
    'serial_number'?: string;
    /**
     *
     * @type {string}
     * @memberof BrandPortalApiSchemaBikeBarcodePart
     */
    'bundle_part_type': string;
}
/**
 *
 * @export
 * @interface BrandPortalApiSchemaBikePartSpec
 */
export interface BrandPortalApiSchemaBikePartSpec {
    /**
     *
     * @type {string}
     * @memberof BrandPortalApiSchemaBikePartSpec
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BrandPortalApiSchemaBikePartSpec
     */
    'marketing_name'?: string;
}
/**
 *
 * @export
 * @interface BrandPortalApiSchemaBikeProtocolPart
 */
export interface BrandPortalApiSchemaBikeProtocolPart {
    /**
     *
     * @type {string}
     * @memberof BrandPortalApiSchemaBikeProtocolPart
     */
    'part_spec_id': string;
    /**
     *
     * @type {string}
     * @memberof BrandPortalApiSchemaBikeProtocolPart
     */
    'serial_number': string;
    /**
     *
     * @type {string}
     * @memberof BrandPortalApiSchemaBikeProtocolPart
     */
    'mid': string;
}
/**
 *
 * @export
 * @interface BrandPortalApiSchemaCaseManagementBarcodePart
 */
export interface BrandPortalApiSchemaCaseManagementBarcodePart {
    /**
     *
     * @type {string}
     * @memberof BrandPortalApiSchemaCaseManagementBarcodePart
     */
    'barcode'?: string;
    /**
     *
     * @type {BundlePartType}
     * @memberof BrandPortalApiSchemaCaseManagementBarcodePart
     */
    'part_type': BundlePartType;
}
/**
 *
 * @export
 * @interface BrandPortalApiSchemaCaseManagementBikeShop
 */
export interface BrandPortalApiSchemaCaseManagementBikeShop {
    /**
     *
     * @type {string}
     * @memberof BrandPortalApiSchemaCaseManagementBikeShop
     */
    'name': string;
    /**
     *
     * @type {PhoneNumber}
     * @memberof BrandPortalApiSchemaCaseManagementBikeShop
     */
    'phone_number': PhoneNumber;
}
/**
 *
 * @export
 * @interface BrandPortalApiSchemaCaseManagementProtocolPart
 */
export interface BrandPortalApiSchemaCaseManagementProtocolPart {
    /**
     *
     * @type {string}
     * @memberof BrandPortalApiSchemaCaseManagementProtocolPart
     */
    'mid': string;
    /**
     *
     * @type {string}
     * @memberof BrandPortalApiSchemaCaseManagementProtocolPart
     */
    'barcode': string;
    /**
     *
     * @type {string}
     * @memberof BrandPortalApiSchemaCaseManagementProtocolPart
     */
    'firmware_version': string;
    /**
     *
     * @type {string}
     * @memberof BrandPortalApiSchemaCaseManagementProtocolPart
     */
    'hardware_version': string;
    /**
     *
     * @type {string}
     * @memberof BrandPortalApiSchemaCaseManagementProtocolPart
     */
    'part_spec_id': string;
    /**
     *
     * @type {BundlePartType}
     * @memberof BrandPortalApiSchemaCaseManagementProtocolPart
     */
    'part_type': BundlePartType;
}
/**
 *
 * @export
 * @interface BrandPortalApiSchemaDealerSupportHubBarcodePart
 */
export interface BrandPortalApiSchemaDealerSupportHubBarcodePart {
    /**
     *
     * @type {string}
     * @memberof BrandPortalApiSchemaDealerSupportHubBarcodePart
     */
    'barcode'?: string;
    /**
     *
     * @type {BundlePartType}
     * @memberof BrandPortalApiSchemaDealerSupportHubBarcodePart
     */
    'bundle_part_type': BundlePartType;
}
/**
 *
 * @export
 * @interface BrandPortalApiSchemaDealerSupportHubProtocolPart
 */
export interface BrandPortalApiSchemaDealerSupportHubProtocolPart {
    /**
     *
     * @type {string}
     * @memberof BrandPortalApiSchemaDealerSupportHubProtocolPart
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BrandPortalApiSchemaDealerSupportHubProtocolPart
     */
    'barcode': string;
    /**
     *
     * @type {string}
     * @memberof BrandPortalApiSchemaDealerSupportHubProtocolPart
     */
    'firmware_version': string;
    /**
     *
     * @type {PartSpecInfo}
     * @memberof BrandPortalApiSchemaDealerSupportHubProtocolPart
     */
    'part_spec': PartSpecInfo;
}
/**
 *
 * @export
 * @interface BrandPortalApiSchemaEnumerationBikeShop
 */
export interface BrandPortalApiSchemaEnumerationBikeShop {
    /**
     *
     * @type {string}
     * @memberof BrandPortalApiSchemaEnumerationBikeShop
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BrandPortalApiSchemaEnumerationBikeShop
     */
    'name': string;
}
/**
 *
 * @export
 * @interface BrandPortalApiSchemaEnumerationPartSpec
 */
export interface BrandPortalApiSchemaEnumerationPartSpec {
    /**
     *
     * @type {string}
     * @memberof BrandPortalApiSchemaEnumerationPartSpec
     */
    'id': string;
    /**
     *
     * @type {PartType}
     * @memberof BrandPortalApiSchemaEnumerationPartSpec
     */
    'part_type': PartType;
    /**
     *
     * @type {CommunicationProtocol}
     * @memberof BrandPortalApiSchemaEnumerationPartSpec
     */
    'communication_protocol': CommunicationProtocol;
    /**
     *
     * @type {string}
     * @memberof BrandPortalApiSchemaEnumerationPartSpec
     */
    'marketing_name'?: string;
    /**
     *
     * @type {string}
     * @memberof BrandPortalApiSchemaEnumerationPartSpec
     */
    'part_image'?: string;
}
/**
 *
 * @export
 * @interface BundleBarcodePart
 */
export interface BundleBarcodePart {
    /**
     *
     * @type {Array<BrandPortalApiSchemaDealerSupportHubBarcodePart>}
     * @memberof BundleBarcodePart
     */
    'barcode_parts': Array<BrandPortalApiSchemaDealerSupportHubBarcodePart>;
    /**
     *
     * @type {Array<AdditionalBundlePartType>}
     * @memberof BundleBarcodePart
     */
    'additional_parts': Array<AdditionalBundlePartType>;
}
/**
 *
 * @export
 * @interface BundlePart
 */
export interface BundlePart {
    /**
     *
     * @type {string}
     * @memberof BundlePart
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof BundlePart
     */
    'serial_number'?: string;
    /**
     *
     * @type {BrandPortalApiSchemaBikePartSpec}
     * @memberof BundlePart
     */
    'spec'?: BrandPortalApiSchemaBikePartSpec;
    /**
     *
     * @type {PartType}
     * @memberof BundlePart
     */
    'type': PartType;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare const BundlePartType: {
    readonly Hmi: "hmi";
    readonly Display: "display";
    readonly Controller: "controller";
    readonly Battery: "battery";
    readonly Motor: "motor";
    readonly CenterMotor: "center_motor";
    readonly Torque: "torque";
    readonly Derailleur: "derailleur";
    readonly Throttle: "throttle";
    readonly Charger: "charger";
    readonly RangeExtenderBattery: "range_extender_battery";
    readonly Cadence: "cadence";
    readonly FrontLight: "front_light";
    readonly RearLight: "rear_light";
};
export type BundlePartType = typeof BundlePartType[keyof typeof BundlePartType];
/**
 *
 * @export
 * @interface BundlePartV2
 */
export interface BundlePartV2 {
    /**
     *
     * @type {Array<BrandPortalApiSchemaBikeProtocolPart>}
     * @memberof BundlePartV2
     */
    'protocol_parts': Array<BrandPortalApiSchemaBikeProtocolPart>;
    /**
     *
     * @type {Array<BrandPortalApiSchemaBikeBarcodePart>}
     * @memberof BundlePartV2
     */
    'barcode_parts': Array<BrandPortalApiSchemaBikeBarcodePart>;
    /**
     *
     * @type {Array<AdditionalBundlePartType>}
     * @memberof BundlePartV2
     */
    'additional_parts': Array<AdditionalBundlePartType>;
}
/**
 *
 * @export
 * @interface BundleRule
 */
export interface BundleRule {
    /**
     *
     * @type {Array<BarcodeRule>}
     * @memberof BundleRule
     */
    'vin_rules': Array<BarcodeRule>;
    /**
     *
     * @type {Array<ProtocolPartSpecs>}
     * @memberof BundleRule
     */
    'protocol_parts': Array<ProtocolPartSpecs>;
    /**
     *
     * @type {Array<BarcodePartSpecs>}
     * @memberof BundleRule
     */
    'barcode_parts': Array<BarcodePartSpecs>;
    /**
     *
     * @type {Array<AdditionalBundlePartType>}
     * @memberof BundleRule
     */
    'additional_parts': Array<AdditionalBundlePartType>;
}
/**
 *
 * @export
 * @interface BundleRulePart
 */
export interface BundleRulePart {
    /**
     *
     * @type {BrandPortalApiSchemaBikePartSpec}
     * @memberof BundleRulePart
     */
    'spec'?: BrandPortalApiSchemaBikePartSpec;
    /**
     *
     * @type {PartType}
     * @memberof BundleRulePart
     */
    'type': PartType;
}
/**
 *
 * @export
 * @interface BundleRuleV2
 */
export interface BundleRuleV2 {
    /**
     *
     * @type {Array<ProtocolPartSpecsV2>}
     * @memberof BundleRuleV2
     */
    'protocol_parts': Array<ProtocolPartSpecsV2>;
    /**
     *
     * @type {Array<BarcodePartSpecsV2>}
     * @memberof BundleRuleV2
     */
    'barcode_parts': Array<BarcodePartSpecsV2>;
    /**
     *
     * @type {Array<AdditionalBundlePartType>}
     * @memberof BundleRuleV2
     */
    'additional_parts': Array<AdditionalBundlePartType>;
}
/**
 *
 * @export
 * @interface CaseManagementOverview
 */
export interface CaseManagementOverview {
    /**
     *
     * @type {string}
     * @memberof CaseManagementOverview
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof CaseManagementOverview
     */
    'vin': string;
    /**
     *
     * @type {CaseType}
     * @memberof CaseManagementOverview
     */
    'type': CaseType;
    /**
     *
     * @type {BrandPortalApiSchemaCaseManagementBikeShop}
     * @memberof CaseManagementOverview
     */
    'bike_shop': BrandPortalApiSchemaCaseManagementBikeShop;
    /**
     *
     * @type {BikeSpec}
     * @memberof CaseManagementOverview
     */
    'bike_spec': BikeSpec;
    /**
     *
     * @type {CaseManagementStatus}
     * @memberof CaseManagementOverview
     */
    'status': CaseManagementStatus;
    /**
     *
     * @type {string}
     * @memberof CaseManagementOverview
     */
    'created_at': string;
    /**
     *
     * @type {string}
     * @memberof CaseManagementOverview
     */
    'updated_at': string;
    /**
     *
     * @type {string}
     * @memberof CaseManagementOverview
     */
    'handled_by'?: string;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare const CaseManagementStatus: {
    readonly ToDo: "To-do";
    readonly Processing: "Processing";
    readonly Approved: "Approved";
    readonly Completed: "Completed";
    readonly Rejected: "Rejected";
};
export type CaseManagementStatus = typeof CaseManagementStatus[keyof typeof CaseManagementStatus];
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare const CaseType: {
    readonly PostBundle: "post_bundle";
    readonly VerifyWorkspace: "verify_workspace";
};
export type CaseType = typeof CaseType[keyof typeof CaseType];
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare const CommunicationProtocol: {
    readonly Hap1: "hap1";
    readonly Hap2: "hap2";
    readonly NoCommunication: "no_communication";
    readonly Uart: "uart";
    readonly Other: "other";
};
export type CommunicationProtocol = typeof CommunicationProtocol[keyof typeof CommunicationProtocol];
/**
 *
 * @export
 * @interface Dealer
 */
export interface Dealer {
    /**
     *
     * @type {string}
     * @memberof Dealer
     */
    'name': string;
    /**
     *
     * @type {Array<number>}
     * @memberof Dealer
     */
    'brand_ids': Array<number>;
    /**
     *
     * @type {Status}
     * @memberof Dealer
     */
    'status': Status;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare const DealerCase: {
    readonly PostBundle: "post_bundle";
};
export type DealerCase = typeof DealerCase[keyof typeof DealerCase];
/**
 *
 * @export
 * @interface DealerSupportHub
 */
export interface DealerSupportHub {
    /**
     *
     * @type {number}
     * @memberof DealerSupportHub
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof DealerSupportHub
     */
    'bike_shop': string;
    /**
     *
     * @type {string}
     * @memberof DealerSupportHub
     */
    'handled_by'?: string;
    /**
     *
     * @type {number}
     * @memberof DealerSupportHub
     */
    'brand_id'?: number;
    /**
     *
     * @type {DealerCase}
     * @memberof DealerSupportHub
     */
    'case': DealerCase;
    /**
     *
     * @type {DealerSupportHubStatus}
     * @memberof DealerSupportHub
     */
    'status': DealerSupportHubStatus;
    /**
     *
     * @type {string}
     * @memberof DealerSupportHub
     */
    'created_at': string;
    /**
     *
     * @type {string}
     * @memberof DealerSupportHub
     */
    'updated_at': string;
    /**
     *
     * @type {ReporterInfo}
     * @memberof DealerSupportHub
     */
    'reporter_info': ReporterInfo;
    /**
     *
     * @type {string}
     * @memberof DealerSupportHub
     */
    'handler_message'?: string;
    /**
     *
     * @type {string}
     * @memberof DealerSupportHub
     */
    'approved_at'?: string;
}
/**
 *
 * @export
 * @interface DealerSupportHubOverview
 */
export interface DealerSupportHubOverview {
    /**
     *
     * @type {number}
     * @memberof DealerSupportHubOverview
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof DealerSupportHubOverview
     */
    'bike_shop': string;
    /**
     *
     * @type {string}
     * @memberof DealerSupportHubOverview
     */
    'handled_by'?: string;
    /**
     *
     * @type {number}
     * @memberof DealerSupportHubOverview
     */
    'brand_id'?: number;
    /**
     *
     * @type {DealerCase}
     * @memberof DealerSupportHubOverview
     */
    'case': DealerCase;
    /**
     *
     * @type {DealerSupportHubStatus}
     * @memberof DealerSupportHubOverview
     */
    'status': DealerSupportHubStatus;
    /**
     *
     * @type {string}
     * @memberof DealerSupportHubOverview
     */
    'created_at': string;
    /**
     *
     * @type {string}
     * @memberof DealerSupportHubOverview
     */
    'updated_at': string;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare const DealerSupportHubStatus: {
    readonly ToDo: "to_do";
    readonly Processing: "processing";
    readonly Approved: "approved";
    readonly Completed: "completed";
    readonly Revised: "revised";
    readonly Rejected: "rejected";
};
export type DealerSupportHubStatus = typeof DealerSupportHubStatus[keyof typeof DealerSupportHubStatus];
/**
 *
 * @export
 * @interface ErrorCode
 */
export interface ErrorCode {
    /**
     *
     * @type {number}
     * @memberof ErrorCode
     */
    'id': number;
    /**
     * km
     * @type {number}
     * @memberof ErrorCode
     */
    'odo': number;
}
/**
 *
 * @export
 * @interface ErrorINFO
 */
export interface ErrorINFO {
    /**
     *
     * @type {number}
     * @memberof ErrorINFO
     */
    'code': number;
    /**
     *
     * @type {string}
     * @memberof ErrorINFO
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof ErrorINFO
     */
    'category': string;
    /**
     *
     * @type {string}
     * @memberof ErrorINFO
     */
    'description': string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof ErrorINFO
     */
    'show': {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface ExceptionResponse
 */
export interface ExceptionResponse {
    /**
     *
     * @type {string}
     * @memberof ExceptionResponse
     */
    'message': string;
    /**
     *
     * @type {string}
     * @memberof ExceptionResponse
     */
    'code': string;
}
/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     *
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 *
 * @export
 * @interface Image
 */
export interface Image {
    /**
     *
     * @type {string}
     * @memberof Image
     */
    'file_name': string;
    /**
     *
     * @type {string}
     * @memberof Image
     */
    'url': string;
}
/**
 *
 * @export
 * @interface Instruction
 */
export interface Instruction {
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof Instruction
     */
    'action': {
        [key: string]: string;
    };
    /**
     *
     * @type {string}
     * @memberof Instruction
     */
    'danger_level': string;
    /**
     *
     * @type {ErrorINFO}
     * @memberof Instruction
     */
    'error': ErrorINFO;
    /**
     *
     * @type {string}
     * @memberof Instruction
     */
    'lang': string;
    /**
     *
     * @type {InstructionPartType}
     * @memberof Instruction
     */
    'part_type': InstructionPartType;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof Instruction
     */
    'replace_parts': {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface InstructionI18n
 */
export interface InstructionI18n {
    /**
     * Error Code id.
     * @type {number}
     * @memberof InstructionI18n
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof InstructionI18n
     */
    'category': string;
    /**
     *
     * @type {string}
     * @memberof InstructionI18n
     */
    'error_type': string;
    /**
     *
     * @type {string}
     * @memberof InstructionI18n
     */
    'error_description': string;
    /**
     *
     * @type {Array<Array<string>>}
     * @memberof InstructionI18n
     */
    'troubleshooting': Array<Array<string>>;
    /**
     *
     * @type {string}
     * @memberof InstructionI18n
     */
    'danger_level': string;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare const InstructionPartType: {
    readonly Brose: "brose";
    readonly Battery: "battery";
    readonly Chain: "chain";
    readonly Console: "console";
    readonly Controller: "controller";
    readonly Driver: "driver";
    readonly Display: "display";
    readonly FrontLight: "front_light";
    readonly Hmi: "hmi";
    readonly Light: "light";
    readonly Misc: "misc";
    readonly Motor: "motor";
    readonly RearLight: "rear_light";
    readonly SpeedSensor: "speed_sensor";
    readonly Speed: "speed";
    readonly Torque: "torque";
    readonly Throttle: "throttle";
};
export type InstructionPartType = typeof InstructionPartType[keyof typeof InstructionPartType];
/**
 *
 * @export
 * @interface InvitableBrand
 */
export interface InvitableBrand {
    /**
     *
     * @type {number}
     * @memberof InvitableBrand
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof InvitableBrand
     */
    'name': string;
    /**
     *
     * @type {Array<ServiceRegion>}
     * @memberof InvitableBrand
     */
    'service_regions': Array<ServiceRegion>;
}
/**
 *
 * @export
 * @interface InviteAccountRequest
 */
export interface InviteAccountRequest {
    /**
     * This field will be removed after versions 3.6.0.
     * @type {Array<number>}
     * @memberof InviteAccountRequest
     */
    'brand_ids'?: Array<number>;
    /**
     * This field will be required after versions 3.6.0.
     * @type {number}
     * @memberof InviteAccountRequest
     */
    'brand_id'?: number;
    /**
     *
     * @type {Array<number>}
     * @memberof InviteAccountRequest
     */
    'service_region_ids': Array<number>;
    /**
     * List of emails
     * @type {Array<string>}
     * @memberof InviteAccountRequest
     */
    'emails': Array<string>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare const LanguageCode: {
    readonly ZhTw: "zh-tw";
    readonly EnUs: "en-us";
    readonly De: "de";
    readonly Fr: "fr";
    readonly Es: "es";
    readonly It: "it";
    readonly Nl: "nl";
};
export type LanguageCode = typeof LanguageCode[keyof typeof LanguageCode];
/**
 *
 * @export
 * @interface ListResponseBikeErrorHistory
 */
export interface ListResponseBikeErrorHistory {
    /**
     *
     * @type {Array<BikeErrorHistory>}
     * @memberof ListResponseBikeErrorHistory
     */
    'result': Array<BikeErrorHistory>;
}
/**
 *
 * @export
 * @interface ListResponseBikeShop
 */
export interface ListResponseBikeShop {
    /**
     *
     * @type {Array<BrandPortalApiSchemaEnumerationBikeShop>}
     * @memberof ListResponseBikeShop
     */
    'result': Array<BrandPortalApiSchemaEnumerationBikeShop>;
}
/**
 *
 * @export
 * @interface ListResponseBikeSpec
 */
export interface ListResponseBikeSpec {
    /**
     *
     * @type {Array<BikeSpec>}
     * @memberof ListResponseBikeSpec
     */
    'result': Array<BikeSpec>;
}
/**
 *
 * @export
 * @interface ListResponseBrand
 */
export interface ListResponseBrand {
    /**
     *
     * @type {Array<Brand>}
     * @memberof ListResponseBrand
     */
    'result': Array<Brand>;
}
/**
 *
 * @export
 * @interface ListResponseCaseManagementOverview
 */
export interface ListResponseCaseManagementOverview {
    /**
     *
     * @type {Array<CaseManagementOverview>}
     * @memberof ListResponseCaseManagementOverview
     */
    'result': Array<CaseManagementOverview>;
}
/**
 *
 * @export
 * @interface ListResponseDealerSupportHubOverview
 */
export interface ListResponseDealerSupportHubOverview {
    /**
     *
     * @type {Array<DealerSupportHubOverview>}
     * @memberof ListResponseDealerSupportHubOverview
     */
    'result': Array<DealerSupportHubOverview>;
}
/**
 *
 * @export
 * @interface ListResponseInstruction
 */
export interface ListResponseInstruction {
    /**
     *
     * @type {Array<Instruction>}
     * @memberof ListResponseInstruction
     */
    'result': Array<Instruction>;
}
/**
 *
 * @export
 * @interface ListResponseInstructionI18n
 */
export interface ListResponseInstructionI18n {
    /**
     *
     * @type {Array<InstructionI18n>}
     * @memberof ListResponseInstructionI18n
     */
    'result': Array<InstructionI18n>;
}
/**
 *
 * @export
 * @interface ListResponseInvitableBrand
 */
export interface ListResponseInvitableBrand {
    /**
     *
     * @type {Array<InvitableBrand>}
     * @memberof ListResponseInvitableBrand
     */
    'result': Array<InvitableBrand>;
}
/**
 *
 * @export
 * @interface ListResponsePartFirmwareUpdatesHistory
 */
export interface ListResponsePartFirmwareUpdatesHistory {
    /**
     *
     * @type {Array<PartFirmwareUpdatesHistory>}
     * @memberof ListResponsePartFirmwareUpdatesHistory
     */
    'result': Array<PartFirmwareUpdatesHistory>;
}
/**
 *
 * @export
 * @interface ListResponsePartReplacementHistory
 */
export interface ListResponsePartReplacementHistory {
    /**
     *
     * @type {Array<PartReplacementHistory>}
     * @memberof ListResponsePartReplacementHistory
     */
    'result': Array<PartReplacementHistory>;
}
/**
 *
 * @export
 * @interface ListResponsePartSpec
 */
export interface ListResponsePartSpec {
    /**
     *
     * @type {Array<BrandPortalApiSchemaEnumerationPartSpec>}
     * @memberof ListResponsePartSpec
     */
    'result': Array<BrandPortalApiSchemaEnumerationPartSpec>;
}
/**
 *
 * @export
 * @interface ListResponsePostBundleOverview
 */
export interface ListResponsePostBundleOverview {
    /**
     *
     * @type {Array<PostBundleOverview>}
     * @memberof ListResponsePostBundleOverview
     */
    'result': Array<PostBundleOverview>;
}
/**
 *
 * @export
 * @interface ListResponseServiceCenter
 */
export interface ListResponseServiceCenter {
    /**
     *
     * @type {Array<ServiceCenter>}
     * @memberof ListResponseServiceCenter
     */
    'result': Array<ServiceCenter>;
}
/**
 *
 * @export
 * @interface ListResponseUnresolvedTaskHistory
 */
export interface ListResponseUnresolvedTaskHistory {
    /**
     *
     * @type {Array<UnresolvedTaskHistory>}
     * @memberof ListResponseUnresolvedTaskHistory
     */
    'result': Array<UnresolvedTaskHistory>;
}
/**
 *
 * @export
 * @interface ListResponseZendeskArticle
 */
export interface ListResponseZendeskArticle {
    /**
     *
     * @type {Array<ZendeskArticle>}
     * @memberof ListResponseZendeskArticle
     */
    'result': Array<ZendeskArticle>;
}
/**
 *
 * @export
 * @interface ListResponseZendeskCategory
 */
export interface ListResponseZendeskCategory {
    /**
     *
     * @type {Array<ZendeskCategory>}
     * @memberof ListResponseZendeskCategory
     */
    'result': Array<ZendeskCategory>;
}
/**
 *
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 *
 * @export
 * @interface OldUpdatePostBundleRequest
 */
export interface OldUpdatePostBundleRequest {
    /**
     *
     * @type {string}
     * @memberof OldUpdatePostBundleRequest
     */
    'vin'?: string;
    /**
     *
     * @type {number}
     * @memberof OldUpdatePostBundleRequest
     */
    'bike_spec_id'?: number;
    /**
     *
     * @type {BundleBarcodePart}
     * @memberof OldUpdatePostBundleRequest
     */
    'bundle'?: BundleBarcodePart;
}
/**
 *
 * @export
 * @interface OrganizationInfo
 */
export interface OrganizationInfo {
    /**
     *
     * @type {string}
     * @memberof OrganizationInfo
     */
    'id': string;
    /**
     *
     * @type {ReportedOrganizationEnum}
     * @memberof OrganizationInfo
     */
    'type': ReportedOrganizationEnum;
}
/**
 *
 * @export
 * @interface PageResponseActivityHistoryInBikeEvent
 */
export interface PageResponseActivityHistoryInBikeEvent {
    /**
     *
     * @type {number}
     * @memberof PageResponseActivityHistoryInBikeEvent
     */
    'page': number;
    /**
     *
     * @type {number}
     * @memberof PageResponseActivityHistoryInBikeEvent
     */
    'total_pages': number;
    /**
     *
     * @type {number}
     * @memberof PageResponseActivityHistoryInBikeEvent
     */
    'page_size': number;
    /**
     *
     * @type {number}
     * @memberof PageResponseActivityHistoryInBikeEvent
     */
    'total': number;
    /**
     *
     * @type {Array<ActivityHistoryInBikeEvent>}
     * @memberof PageResponseActivityHistoryInBikeEvent
     */
    'result': Array<ActivityHistoryInBikeEvent>;
}
/**
 *
 * @export
 * @interface PageResponseDealer
 */
export interface PageResponseDealer {
    /**
     *
     * @type {number}
     * @memberof PageResponseDealer
     */
    'page': number;
    /**
     *
     * @type {number}
     * @memberof PageResponseDealer
     */
    'total_pages': number;
    /**
     *
     * @type {number}
     * @memberof PageResponseDealer
     */
    'page_size': number;
    /**
     *
     * @type {number}
     * @memberof PageResponseDealer
     */
    'total': number;
    /**
     *
     * @type {Array<Dealer>}
     * @memberof PageResponseDealer
     */
    'result': Array<Dealer>;
}
/**
 *
 * @export
 * @interface PartFirmwareUpdatesHistory
 */
export interface PartFirmwareUpdatesHistory {
    /**
     *
     * @type {string}
     * @memberof PartFirmwareUpdatesHistory
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof PartFirmwareUpdatesHistory
     */
    'barcode': string;
    /**
     *
     * @type {BrandPortalApiSchemaBikePartSpec}
     * @memberof PartFirmwareUpdatesHistory
     */
    'spec': BrandPortalApiSchemaBikePartSpec;
    /**
     *
     * @type {PartType}
     * @memberof PartFirmwareUpdatesHistory
     */
    'type': PartType;
    /**
     *
     * @type {string}
     * @memberof PartFirmwareUpdatesHistory
     */
    'firmware_version': string;
    /**
     *
     * @type {string}
     * @memberof PartFirmwareUpdatesHistory
     */
    'updated_at': string;
}
/**
 *
 * @export
 * @interface PartReplacementHistory
 */
export interface PartReplacementHistory {
    /**
     *
     * @type {ReplacementPartType}
     * @memberof PartReplacementHistory
     */
    'type': ReplacementPartType;
    /**
     *
     * @type {ReplacementPart}
     * @memberof PartReplacementHistory
     */
    'remove'?: ReplacementPart;
    /**
     *
     * @type {ReplacementPart}
     * @memberof PartReplacementHistory
     */
    'add'?: ReplacementPart;
    /**
     *
     * @type {string}
     * @memberof PartReplacementHistory
     */
    'replaced_at': string;
}
/**
 *
 * @export
 * @interface PartSpecInfo
 */
export interface PartSpecInfo {
    /**
     *
     * @type {string}
     * @memberof PartSpecInfo
     */
    'id': string;
    /**
     *
     * @type {BundlePartType}
     * @memberof PartSpecInfo
     */
    'type': BundlePartType;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare const PartType: {
    readonly Hmi: "hmi";
    readonly Battery: "battery";
    readonly Motor: "motor";
    readonly Controller: "controller";
    readonly Dongle: "dongle";
    readonly Torque: "torque";
    readonly Throttle: "throttle";
    readonly Lock: "lock";
    readonly Display: "display";
    readonly FrontLight: "front_light";
    readonly RearLight: "rear_light";
    readonly Derailleur: "derailleur";
    readonly Cadence: "cadence";
    readonly Charger: "charger";
    readonly RangeExtenderBattery: "range_extender_battery";
    readonly SpeedSensor: "speed_sensor";
    readonly MotorCore: "motor_core";
    readonly MidMotor: "mid_motor";
};
export type PartType = typeof PartType[keyof typeof PartType];
/**
 *
 * @export
 * @interface PhoneNumber
 */
export interface PhoneNumber {
    /**
     *
     * @type {number}
     * @memberof PhoneNumber
     */
    'calling_code': number;
    /**
     *
     * @type {string}
     * @memberof PhoneNumber
     */
    'number': string;
}
/**
 *
 * @export
 * @interface PostBundle
 */
export interface PostBundle {
    /**
     *
     * @type {number}
     * @memberof PostBundle
     */
    'dealer_support_hub_id': number;
    /**
     *
     * @type {string}
     * @memberof PostBundle
     */
    'verify_code': string;
    /**
     *
     * @type {string}
     * @memberof PostBundle
     */
    'vin': string;
    /**
     *
     * @type {string}
     * @memberof PostBundle
     */
    'reported_bike_spec_name': string;
    /**
     *
     * @type {number}
     * @memberof PostBundle
     */
    'bike_spec_id'?: number;
    /**
     *
     * @type {string}
     * @memberof PostBundle
     */
    'created_at': string;
    /**
     *
     * @type {string}
     * @memberof PostBundle
     */
    'updated_at': string;
    /**
     *
     * @type {BikeBundlePart}
     * @memberof PostBundle
     */
    'bundle': BikeBundlePart;
}
/**
 *
 * @export
 * @interface PostBundleCase
 */
export interface PostBundleCase {
    /**
     *
     * @type {string}
     * @memberof PostBundleCase
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof PostBundleCase
     */
    'vin': string;
    /**
     *
     * @type {CaseType}
     * @memberof PostBundleCase
     */
    'type': CaseType;
    /**
     *
     * @type {BrandPortalApiSchemaCaseManagementBikeShop}
     * @memberof PostBundleCase
     */
    'bike_shop': BrandPortalApiSchemaCaseManagementBikeShop;
    /**
     *
     * @type {BikeSpec}
     * @memberof PostBundleCase
     */
    'bike_spec': BikeSpec;
    /**
     *
     * @type {CaseManagementStatus}
     * @memberof PostBundleCase
     */
    'status': CaseManagementStatus;
    /**
     *
     * @type {string}
     * @memberof PostBundleCase
     */
    'created_at': string;
    /**
     *
     * @type {string}
     * @memberof PostBundleCase
     */
    'updated_at': string;
    /**
     *
     * @type {string}
     * @memberof PostBundleCase
     */
    'handled_by'?: string;
    /**
     *
     * @type {ReporterContact}
     * @memberof PostBundleCase
     */
    'reporter_contact': ReporterContact;
    /**
     *
     * @type {string}
     * @memberof PostBundleCase
     */
    'message'?: string;
    /**
     *
     * @type {string}
     * @memberof PostBundleCase
     */
    'note'?: string;
    /**
     *
     * @type {PostBundleInfo}
     * @memberof PostBundleCase
     */
    'detail'?: PostBundleInfo;
}
/**
 *
 * @export
 * @interface PostBundleInfo
 */
export interface PostBundleInfo {
    /**
     *
     * @type {Array<BrandPortalApiSchemaCaseManagementProtocolPart>}
     * @memberof PostBundleInfo
     */
    'protocol_part_list': Array<BrandPortalApiSchemaCaseManagementProtocolPart>;
    /**
     *
     * @type {Array<BrandPortalApiSchemaCaseManagementBarcodePart>}
     * @memberof PostBundleInfo
     */
    'barcode_part_list': Array<BrandPortalApiSchemaCaseManagementBarcodePart>;
}
/**
 *
 * @export
 * @interface PostBundleOverview
 */
export interface PostBundleOverview {
    /**
     *
     * @type {number}
     * @memberof PostBundleOverview
     */
    'dealer_support_hub_id': number;
    /**
     *
     * @type {string}
     * @memberof PostBundleOverview
     */
    'verify_code': string;
    /**
     *
     * @type {string}
     * @memberof PostBundleOverview
     */
    'vin': string;
    /**
     *
     * @type {string}
     * @memberof PostBundleOverview
     */
    'reported_bike_spec_name': string;
    /**
     *
     * @type {number}
     * @memberof PostBundleOverview
     */
    'bike_spec_id'?: number;
    /**
     *
     * @type {string}
     * @memberof PostBundleOverview
     */
    'created_at': string;
    /**
     *
     * @type {string}
     * @memberof PostBundleOverview
     */
    'updated_at': string;
}
/**
 *
 * @export
 * @interface ProtocolPartSpecs
 */
export interface ProtocolPartSpecs {
    /**
     *
     * @type {BundlePartType}
     * @memberof ProtocolPartSpecs
     */
    'bundle_part_type': BundlePartType;
    /**
     *
     * @type {Array<string>}
     * @memberof ProtocolPartSpecs
     */
    'part_spec_list': Array<string>;
}
/**
 *
 * @export
 * @interface ProtocolPartSpecsV2
 */
export interface ProtocolPartSpecsV2 {
    /**
     *
     * @type {PartType}
     * @memberof ProtocolPartSpecsV2
     */
    'bundle_part_type': PartType;
    /**
     *
     * @type {Array<string>}
     * @memberof ProtocolPartSpecsV2
     */
    'part_spec_ids': Array<string>;
}
/**
 *
 * @export
 * @interface ReplacementPart
 */
export interface ReplacementPart {
    /**
     *
     * @type {string}
     * @memberof ReplacementPart
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ReplacementPart
     */
    'serial_number'?: string;
    /**
     *
     * @type {ReplacementPartSpec}
     * @memberof ReplacementPart
     */
    'spec'?: ReplacementPartSpec;
}
/**
 *
 * @export
 * @interface ReplacementPartSpec
 */
export interface ReplacementPartSpec {
    /**
     *
     * @type {string}
     * @memberof ReplacementPartSpec
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ReplacementPartSpec
     */
    'marketing_name'?: string;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare const ReplacementPartType: {
    readonly Hmi: "hmi";
    readonly Battery: "battery";
    readonly Motor: "motor";
    readonly Controller: "controller";
    readonly Dongle: "dongle";
    readonly Torque: "torque";
    readonly Throttle: "throttle";
    readonly Lock: "lock";
    readonly Display: "display";
    readonly FrontLight: "front_light";
    readonly RearLight: "rear_light";
    readonly Derailleur: "derailleur";
    readonly Cadence: "cadence";
    readonly Charger: "charger";
    readonly Speed: "speed";
    readonly RangeExtenderBattery: "range_extender_battery";
};
export type ReplacementPartType = typeof ReplacementPartType[keyof typeof ReplacementPartType];
/**
 * ReportedOrganizationEnum
 * @export
 * @enum {string}
 */
export declare const ReportedOrganizationEnum: {
    readonly Brand: "BRAND";
    readonly ServiceCenter: "SERVICE_CENTER";
    readonly BikeShop: "BIKE_SHOP";
};
export type ReportedOrganizationEnum = typeof ReportedOrganizationEnum[keyof typeof ReportedOrganizationEnum];
/**
 * ReportedSystem
 * @export
 * @enum {string}
 */
export declare const ReportedSystem: {
    readonly Hst: "HST";
    readonly HstV3: "HST_V3";
    readonly Hra: "HRA";
};
export type ReportedSystem = typeof ReportedSystem[keyof typeof ReportedSystem];
/**
 *
 * @export
 * @interface ReporterContact
 */
export interface ReporterContact {
    /**
     *
     * @type {ReporterRole}
     * @memberof ReporterContact
     */
    'role': ReporterRole;
    /**
     *
     * @type {string}
     * @memberof ReporterContact
     */
    'first_name'?: string;
    /**
     *
     * @type {string}
     * @memberof ReporterContact
     */
    'last_name'?: string;
    /**
     *
     * @type {string}
     * @memberof ReporterContact
     */
    'email': string;
}
/**
 *
 * @export
 * @interface ReporterInfo
 */
export interface ReporterInfo {
    /**
     *
     * @type {string}
     * @memberof ReporterInfo
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof ReporterInfo
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof ReporterInfo
     */
    'phone': string;
    /**
     *
     * @type {string}
     * @memberof ReporterInfo
     */
    'message'?: string;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare const ReporterRole: {
    readonly Dealer: "dealer";
    readonly ServiceCenter: "service_center";
};
export type ReporterRole = typeof ReporterRole[keyof typeof ReporterRole];
/**
 *
 * @export
 * @interface ServiceCenter
 */
export interface ServiceCenter {
    /**
     *
     * @type {number}
     * @memberof ServiceCenter
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof ServiceCenter
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof ServiceCenter
     */
    'address'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceCenter
     */
    'email'?: string;
}
/**
 *
 * @export
 * @interface ServiceRegion
 */
export interface ServiceRegion {
    /**
     *
     * @type {number}
     * @memberof ServiceRegion
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof ServiceRegion
     */
    'code': string;
}
/**
 *
 * @export
 * @interface SingleResponseBike
 */
export interface SingleResponseBike {
    /**
     *
     * @type {Bike}
     * @memberof SingleResponseBike
     */
    'result': Bike;
}
/**
 *
 * @export
 * @interface SingleResponseBikeInformation
 */
export interface SingleResponseBikeInformation {
    /**
     *
     * @type {BikeInformation}
     * @memberof SingleResponseBikeInformation
     */
    'result': BikeInformation;
}
/**
 *
 * @export
 * @interface SingleResponseBundleRule
 */
export interface SingleResponseBundleRule {
    /**
     *
     * @type {BundleRule}
     * @memberof SingleResponseBundleRule
     */
    'result': BundleRule;
}
/**
 *
 * @export
 * @interface SingleResponseDealerSupportHub
 */
export interface SingleResponseDealerSupportHub {
    /**
     *
     * @type {DealerSupportHub}
     * @memberof SingleResponseDealerSupportHub
     */
    'result': DealerSupportHub;
}
/**
 *
 * @export
 * @interface SingleResponsePostBundle
 */
export interface SingleResponsePostBundle {
    /**
     *
     * @type {PostBundle}
     * @memberof SingleResponsePostBundle
     */
    'result': PostBundle;
}
/**
 *
 * @export
 * @interface SingleResponsePostBundleCase
 */
export interface SingleResponsePostBundleCase {
    /**
     *
     * @type {PostBundleCase}
     * @memberof SingleResponsePostBundleCase
     */
    'result': PostBundleCase;
}
/**
 *
 * @export
 * @interface SingleResponseVerifyWorkspaceCase
 */
export interface SingleResponseVerifyWorkspaceCase {
    /**
     *
     * @type {VerifyWorkspaceCase}
     * @memberof SingleResponseVerifyWorkspaceCase
     */
    'result': VerifyWorkspaceCase;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare const SpeedLimitOption: {
    readonly _24: "KM_24";
    readonly _25: "KM_25";
    readonly _245Full: "KM_24_5_FULL";
    readonly _25Full: "KM_25_FULL";
    readonly _29Full: "KM_29_FULL";
    readonly _32: "KM_32";
    readonly _45: "KM_45";
};
export type SpeedLimitOption = typeof SpeedLimitOption[keyof typeof SpeedLimitOption];
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare const Status: {
    readonly Enabled: "enabled";
    readonly Disabled: "disabled";
    readonly Unconfirmed: "unconfirmed";
};
export type Status = typeof Status[keyof typeof Status];
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare const TaskRule: {
    readonly PartBundleNotMatch: "part_bundle_not_match";
    readonly PartBundleNotFound: "part_bundle_not_found";
    readonly MidNotFound: "mid_not_found";
    readonly IllegalMid: "illegal_mid";
    readonly VinNotFound: "vin_not_found";
    readonly FirmwareUpdateAvailable: "firmware_update_available";
    readonly InBootloader: "in_bootloader";
    readonly ErrorCodeDanger: "error_code_danger";
    readonly ErrorCodeWarning: "error_code_warning";
    readonly ParameterNeedCompare: "parameter_need_compare";
    readonly ParameterNeedUpdate: "parameter_need_update";
    readonly MeasurementSpeedError: "measurement_speed_error";
    readonly PedalTorqueError: "pedal_torque_error";
    readonly PedalRpmError: "pedal_rpm_error";
    readonly BundleRuleNotMatch: "bundle_rule_not_match";
    readonly HmiNeedDiagnosis: "hmi_need_diagnosis";
};
export type TaskRule = typeof TaskRule[keyof typeof TaskRule];
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export declare const UnitOfLengthOption: {
    readonly Km: "KM";
    readonly Mi: "MI";
};
export type UnitOfLengthOption = typeof UnitOfLengthOption[keyof typeof UnitOfLengthOption];
/**
 *
 * @export
 * @interface UnresolvedTaskHistory
 */
export interface UnresolvedTaskHistory {
    /**
     *
     * @type {TaskRule}
     * @memberof UnresolvedTaskHistory
     */
    'rule_name': TaskRule;
    /**
     *
     * @type {string}
     * @memberof UnresolvedTaskHistory
     */
    'target': string;
    /**
     *
     * @type {string}
     * @memberof UnresolvedTaskHistory
     */
    'bike_shop_id': string;
    /**
     *
     * @type {string}
     * @memberof UnresolvedTaskHistory
     */
    'detected_at': string;
}
/**
 *
 * @export
 * @interface UpdateDealerSupportHubRequest
 */
export interface UpdateDealerSupportHubRequest {
    /**
     *
     * @type {string}
     * @memberof UpdateDealerSupportHubRequest
     */
    'bike_shop'?: string;
    /**
     *
     * @type {number}
     * @memberof UpdateDealerSupportHubRequest
     */
    'brand_id'?: number;
    /**
     *
     * @type {UpdateReportedInfoRequest}
     * @memberof UpdateDealerSupportHubRequest
     */
    'reporter_info'?: UpdateReportedInfoRequest;
    /**
     *
     * @type {string}
     * @memberof UpdateDealerSupportHubRequest
     */
    'handler_message'?: string;
}
/**
 *
 * @export
 * @interface UpdatePostBundleRequest
 */
export interface UpdatePostBundleRequest {
    /**
     *
     * @type {string}
     * @memberof UpdatePostBundleRequest
     */
    'note'?: string;
    /**
     *
     * @type {CaseManagementStatus}
     * @memberof UpdatePostBundleRequest
     */
    'status'?: CaseManagementStatus;
    /**
     *
     * @type {string}
     * @memberof UpdatePostBundleRequest
     */
    'vin'?: string;
    /**
     *
     * @type {number}
     * @memberof UpdatePostBundleRequest
     */
    'bike_spec_id'?: number;
    /**
     *
     * @type {Array<BrandPortalApiSchemaCaseManagementBarcodePart>}
     * @memberof UpdatePostBundleRequest
     */
    'barcode_part_list': Array<BrandPortalApiSchemaCaseManagementBarcodePart>;
}
/**
 *
 * @export
 * @interface UpdateReportedInfoRequest
 */
export interface UpdateReportedInfoRequest {
    /**
     *
     * @type {string}
     * @memberof UpdateReportedInfoRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateReportedInfoRequest
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateReportedInfoRequest
     */
    'phone'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateReportedInfoRequest
     */
    'message'?: string;
}
/**
 *
 * @export
 * @interface UpdateVerifyWorkspaceRequest
 */
export interface UpdateVerifyWorkspaceRequest {
    /**
     *
     * @type {string}
     * @memberof UpdateVerifyWorkspaceRequest
     */
    'note'?: string;
    /**
     *
     * @type {CaseManagementStatus}
     * @memberof UpdateVerifyWorkspaceRequest
     */
    'status'?: CaseManagementStatus;
    /**
     *
     * @type {string}
     * @memberof UpdateVerifyWorkspaceRequest
     */
    'reason'?: string;
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     *
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     *
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     *
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 *
 * @export
 * @interface VerifyWorkspaceCase
 */
export interface VerifyWorkspaceCase {
    /**
     *
     * @type {string}
     * @memberof VerifyWorkspaceCase
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof VerifyWorkspaceCase
     */
    'vin': string;
    /**
     *
     * @type {CaseType}
     * @memberof VerifyWorkspaceCase
     */
    'type': CaseType;
    /**
     *
     * @type {BrandPortalApiSchemaCaseManagementBikeShop}
     * @memberof VerifyWorkspaceCase
     */
    'bike_shop': BrandPortalApiSchemaCaseManagementBikeShop;
    /**
     *
     * @type {BikeSpec}
     * @memberof VerifyWorkspaceCase
     */
    'bike_spec': BikeSpec;
    /**
     *
     * @type {CaseManagementStatus}
     * @memberof VerifyWorkspaceCase
     */
    'status': CaseManagementStatus;
    /**
     *
     * @type {string}
     * @memberof VerifyWorkspaceCase
     */
    'created_at': string;
    /**
     *
     * @type {string}
     * @memberof VerifyWorkspaceCase
     */
    'updated_at': string;
    /**
     *
     * @type {string}
     * @memberof VerifyWorkspaceCase
     */
    'handled_by'?: string;
    /**
     *
     * @type {ReporterContact}
     * @memberof VerifyWorkspaceCase
     */
    'reporter_contact': ReporterContact;
    /**
     *
     * @type {string}
     * @memberof VerifyWorkspaceCase
     */
    'message'?: string;
    /**
     *
     * @type {string}
     * @memberof VerifyWorkspaceCase
     */
    'note'?: string;
    /**
     *
     * @type {VerifyWorkspaceInfo}
     * @memberof VerifyWorkspaceCase
     */
    'detail'?: VerifyWorkspaceInfo;
}
/**
 *
 * @export
 * @interface VerifyWorkspaceInfo
 */
export interface VerifyWorkspaceInfo {
    /**
     *
     * @type {Array<string>}
     * @memberof VerifyWorkspaceInfo
     */
    'mid_list': Array<string>;
    /**
     *
     * @type {Image}
     * @memberof VerifyWorkspaceInfo
     */
    'vin_image': Image;
    /**
     *
     * @type {Image}
     * @memberof VerifyWorkspaceInfo
     */
    'bike_image': Image;
}
/**
 *
 * @export
 * @interface ZendeskArticle
 */
export interface ZendeskArticle {
    /**
     *
     * @type {number}
     * @memberof ZendeskArticle
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof ZendeskArticle
     */
    'title': string;
    /**
     *
     * @type {Array<string>}
     * @memberof ZendeskArticle
     */
    'label_names': Array<string>;
}
/**
 *
 * @export
 * @interface ZendeskCategory
 */
export interface ZendeskCategory {
    /**
     *
     * @type {number}
     * @memberof ZendeskCategory
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof ZendeskCategory
     */
    'name': string;
}
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Invitable Brands
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvitableBrands: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Invite Dealer Account
     * @param {InviteAccountRequest} inviteAccountRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inviteDealerAccount: (inviteAccountRequest: InviteAccountRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Query Dealer Account Overview
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [username]
     * @param {Array<number>} [brandIds]
     * @param {Status} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryDealerAccountOverview: (page?: number, pageSize?: number, username?: string, brandIds?: Array<number>, status?: Status, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Resend Temporary Password
     * @param {BodyResendTemporaryPasswordAuthTemporaryPasswordPost} bodyResendTemporaryPasswordAuthTemporaryPasswordPost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendTemporaryPassword: (bodyResendTemporaryPasswordAuthTemporaryPasswordPost: BodyResendTemporaryPasswordAuthTemporaryPasswordPost, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Invitable Brands
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvitableBrands(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponseInvitableBrand>>;
    /**
     *
     * @summary Invite Dealer Account
     * @param {InviteAccountRequest} inviteAccountRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inviteDealerAccount(inviteAccountRequest: InviteAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Query Dealer Account Overview
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [username]
     * @param {Array<number>} [brandIds]
     * @param {Status} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryDealerAccountOverview(page?: number, pageSize?: number, username?: string, brandIds?: Array<number>, status?: Status, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageResponseDealer>>;
    /**
     *
     * @summary Resend Temporary Password
     * @param {BodyResendTemporaryPasswordAuthTemporaryPasswordPost} bodyResendTemporaryPasswordAuthTemporaryPasswordPost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendTemporaryPassword(bodyResendTemporaryPasswordAuthTemporaryPasswordPost: BodyResendTemporaryPasswordAuthTemporaryPasswordPost, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get Invitable Brands
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvitableBrands(options?: any): AxiosPromise<ListResponseInvitableBrand>;
    /**
     *
     * @summary Invite Dealer Account
     * @param {InviteAccountRequest} inviteAccountRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inviteDealerAccount(inviteAccountRequest: InviteAccountRequest, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Query Dealer Account Overview
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [username]
     * @param {Array<number>} [brandIds]
     * @param {Status} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryDealerAccountOverview(page?: number, pageSize?: number, username?: string, brandIds?: Array<number>, status?: Status, options?: any): AxiosPromise<PageResponseDealer>;
    /**
     *
     * @summary Resend Temporary Password
     * @param {BodyResendTemporaryPasswordAuthTemporaryPasswordPost} bodyResendTemporaryPasswordAuthTemporaryPasswordPost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendTemporaryPassword(bodyResendTemporaryPasswordAuthTemporaryPasswordPost: BodyResendTemporaryPasswordAuthTemporaryPasswordPost, options?: any): AxiosPromise<void>;
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     *
     * @summary Get Invitable Brands
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    getInvitableBrands(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListResponseInvitableBrand, any>>;
    /**
     *
     * @summary Invite Dealer Account
     * @param {InviteAccountRequest} inviteAccountRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    inviteDealerAccount(inviteAccountRequest: InviteAccountRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Query Dealer Account Overview
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [username]
     * @param {Array<number>} [brandIds]
     * @param {Status} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    queryDealerAccountOverview(page?: number, pageSize?: number, username?: string, brandIds?: Array<number>, status?: Status, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PageResponseDealer, any>>;
    /**
     *
     * @summary Resend Temporary Password
     * @param {BodyResendTemporaryPasswordAuthTemporaryPasswordPost} bodyResendTemporaryPasswordAuthTemporaryPasswordPost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    resendTemporaryPassword(bodyResendTemporaryPasswordAuthTemporaryPasswordPost: BodyResendTemporaryPasswordAuthTemporaryPasswordPost, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * BikeApi - axios parameter creator
 * @export
 */
export declare const BikeApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Activity History
     * @param {string} vin
     * @param {string} reportedAtMin
     * @param {string} reportedAtMax
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivityHistory: (vin: string, reportedAtMin: string, reportedAtMax: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Bike Error Code History
     * @param {string} bikeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBikeErrorCodeHistory: (bikeId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Bike Info
     * @param {string} vin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBikeInfo: (vin: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Bike Information
     * @param {string} vin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBikeInformation: (vin: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Firmware Updates
     * @param {string} bikeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFirmwareUpdates: (bikeId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Part Replacement History
     * @param {string} bikeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPartReplacementHistory: (bikeId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Unresolved Task History
     * @param {string} vin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnresolvedTaskHistory: (vin: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BikeApi - functional programming interface
 * @export
 */
export declare const BikeApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Activity History
     * @param {string} vin
     * @param {string} reportedAtMin
     * @param {string} reportedAtMax
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivityHistory(vin: string, reportedAtMin: string, reportedAtMax: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageResponseActivityHistoryInBikeEvent>>;
    /**
     *
     * @summary Get Bike Error Code History
     * @param {string} bikeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBikeErrorCodeHistory(bikeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponseBikeErrorHistory>>;
    /**
     *
     * @summary Get Bike Info
     * @param {string} vin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBikeInfo(vin: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResponseBike>>;
    /**
     *
     * @summary Get Bike Information
     * @param {string} vin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBikeInformation(vin: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResponseBikeInformation>>;
    /**
     *
     * @summary Get Firmware Updates
     * @param {string} bikeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFirmwareUpdates(bikeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponsePartFirmwareUpdatesHistory>>;
    /**
     *
     * @summary Get Part Replacement History
     * @param {string} bikeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPartReplacementHistory(bikeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponsePartReplacementHistory>>;
    /**
     *
     * @summary Get Unresolved Task History
     * @param {string} vin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnresolvedTaskHistory(vin: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponseUnresolvedTaskHistory>>;
};
/**
 * BikeApi - factory interface
 * @export
 */
export declare const BikeApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get Activity History
     * @param {string} vin
     * @param {string} reportedAtMin
     * @param {string} reportedAtMax
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivityHistory(vin: string, reportedAtMin: string, reportedAtMax: string, page?: number, pageSize?: number, options?: any): AxiosPromise<PageResponseActivityHistoryInBikeEvent>;
    /**
     *
     * @summary Get Bike Error Code History
     * @param {string} bikeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBikeErrorCodeHistory(bikeId: string, options?: any): AxiosPromise<ListResponseBikeErrorHistory>;
    /**
     *
     * @summary Get Bike Info
     * @param {string} vin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBikeInfo(vin: string, options?: any): AxiosPromise<SingleResponseBike>;
    /**
     *
     * @summary Get Bike Information
     * @param {string} vin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBikeInformation(vin: string, options?: any): AxiosPromise<SingleResponseBikeInformation>;
    /**
     *
     * @summary Get Firmware Updates
     * @param {string} bikeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFirmwareUpdates(bikeId: string, options?: any): AxiosPromise<ListResponsePartFirmwareUpdatesHistory>;
    /**
     *
     * @summary Get Part Replacement History
     * @param {string} bikeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPartReplacementHistory(bikeId: string, options?: any): AxiosPromise<ListResponsePartReplacementHistory>;
    /**
     *
     * @summary Get Unresolved Task History
     * @param {string} vin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnresolvedTaskHistory(vin: string, options?: any): AxiosPromise<ListResponseUnresolvedTaskHistory>;
};
/**
 * BikeApi - object-oriented interface
 * @export
 * @class BikeApi
 * @extends {BaseAPI}
 */
export declare class BikeApi extends BaseAPI {
    /**
     *
     * @summary Get Activity History
     * @param {string} vin
     * @param {string} reportedAtMin
     * @param {string} reportedAtMax
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BikeApi
     */
    getActivityHistory(vin: string, reportedAtMin: string, reportedAtMax: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PageResponseActivityHistoryInBikeEvent, any>>;
    /**
     *
     * @summary Get Bike Error Code History
     * @param {string} bikeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BikeApi
     */
    getBikeErrorCodeHistory(bikeId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListResponseBikeErrorHistory, any>>;
    /**
     *
     * @summary Get Bike Info
     * @param {string} vin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BikeApi
     */
    getBikeInfo(vin: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleResponseBike, any>>;
    /**
     *
     * @summary Get Bike Information
     * @param {string} vin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BikeApi
     */
    getBikeInformation(vin: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleResponseBikeInformation, any>>;
    /**
     *
     * @summary Get Firmware Updates
     * @param {string} bikeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BikeApi
     */
    getFirmwareUpdates(bikeId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListResponsePartFirmwareUpdatesHistory, any>>;
    /**
     *
     * @summary Get Part Replacement History
     * @param {string} bikeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BikeApi
     */
    getPartReplacementHistory(bikeId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListResponsePartReplacementHistory, any>>;
    /**
     *
     * @summary Get Unresolved Task History
     * @param {string} vin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BikeApi
     */
    getUnresolvedTaskHistory(vin: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListResponseUnresolvedTaskHistory, any>>;
}
/**
 * BikeSpecApi - axios parameter creator
 * @export
 */
export declare const BikeSpecApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Bike Spec Bundle Rule
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBikeSpecBundleRule: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Bike Spec List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBikeSpecList: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BikeSpecApi - functional programming interface
 * @export
 */
export declare const BikeSpecApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Bike Spec Bundle Rule
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBikeSpecBundleRule(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResponseBundleRule>>;
    /**
     *
     * @summary Get Bike Spec List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBikeSpecList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponseBikeSpec>>;
};
/**
 * BikeSpecApi - factory interface
 * @export
 */
export declare const BikeSpecApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get Bike Spec Bundle Rule
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBikeSpecBundleRule(id: number, options?: any): AxiosPromise<SingleResponseBundleRule>;
    /**
     *
     * @summary Get Bike Spec List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBikeSpecList(options?: any): AxiosPromise<ListResponseBikeSpec>;
};
/**
 * BikeSpecApi - object-oriented interface
 * @export
 * @class BikeSpecApi
 * @extends {BaseAPI}
 */
export declare class BikeSpecApi extends BaseAPI {
    /**
     *
     * @summary Get Bike Spec Bundle Rule
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BikeSpecApi
     */
    getBikeSpecBundleRule(id: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleResponseBundleRule, any>>;
    /**
     *
     * @summary Get Bike Spec List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BikeSpecApi
     */
    getBikeSpecList(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListResponseBikeSpec, any>>;
}
/**
 * CaseManagementApi - axios parameter creator
 * @export
 */
export declare const CaseManagementApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Case Management List
     * @param {CaseType} caseType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCaseManagementList: (caseType: CaseType, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Post Bundle Case By Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostBundleCaseById: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Verify Workspace Case By Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVerifyWorkspaceCaseById: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Handle Post Bundle Case
     * @param {string} id
     * @param {UpdatePostBundleRequest} updatePostBundleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handlePostBundleCase: (id: string, updatePostBundleRequest: UpdatePostBundleRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Handle Verify Workspace Case
     * @param {string} id
     * @param {UpdateVerifyWorkspaceRequest} updateVerifyWorkspaceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleVerifyWorkspaceCase: (id: string, updateVerifyWorkspaceRequest: UpdateVerifyWorkspaceRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update Post Bundle Case
     * @param {string} id
     * @param {UpdatePostBundleRequest} updatePostBundleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePostBundleCase: (id: string, updatePostBundleRequest: UpdatePostBundleRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CaseManagementApi - functional programming interface
 * @export
 */
export declare const CaseManagementApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Case Management List
     * @param {CaseType} caseType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCaseManagementList(caseType: CaseType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponseCaseManagementOverview>>;
    /**
     *
     * @summary Get Post Bundle Case By Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostBundleCaseById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResponsePostBundleCase>>;
    /**
     *
     * @summary Get Verify Workspace Case By Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVerifyWorkspaceCaseById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResponseVerifyWorkspaceCase>>;
    /**
     *
     * @summary Handle Post Bundle Case
     * @param {string} id
     * @param {UpdatePostBundleRequest} updatePostBundleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handlePostBundleCase(id: string, updatePostBundleRequest: UpdatePostBundleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResponsePostBundleCase>>;
    /**
     *
     * @summary Handle Verify Workspace Case
     * @param {string} id
     * @param {UpdateVerifyWorkspaceRequest} updateVerifyWorkspaceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleVerifyWorkspaceCase(id: string, updateVerifyWorkspaceRequest: UpdateVerifyWorkspaceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResponseVerifyWorkspaceCase>>;
    /**
     *
     * @summary Update Post Bundle Case
     * @param {string} id
     * @param {UpdatePostBundleRequest} updatePostBundleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePostBundleCase(id: string, updatePostBundleRequest: UpdatePostBundleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResponsePostBundleCase>>;
};
/**
 * CaseManagementApi - factory interface
 * @export
 */
export declare const CaseManagementApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get Case Management List
     * @param {CaseType} caseType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCaseManagementList(caseType: CaseType, options?: any): AxiosPromise<ListResponseCaseManagementOverview>;
    /**
     *
     * @summary Get Post Bundle Case By Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostBundleCaseById(id: string, options?: any): AxiosPromise<SingleResponsePostBundleCase>;
    /**
     *
     * @summary Get Verify Workspace Case By Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVerifyWorkspaceCaseById(id: string, options?: any): AxiosPromise<SingleResponseVerifyWorkspaceCase>;
    /**
     *
     * @summary Handle Post Bundle Case
     * @param {string} id
     * @param {UpdatePostBundleRequest} updatePostBundleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handlePostBundleCase(id: string, updatePostBundleRequest: UpdatePostBundleRequest, options?: any): AxiosPromise<SingleResponsePostBundleCase>;
    /**
     *
     * @summary Handle Verify Workspace Case
     * @param {string} id
     * @param {UpdateVerifyWorkspaceRequest} updateVerifyWorkspaceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleVerifyWorkspaceCase(id: string, updateVerifyWorkspaceRequest: UpdateVerifyWorkspaceRequest, options?: any): AxiosPromise<SingleResponseVerifyWorkspaceCase>;
    /**
     *
     * @summary Update Post Bundle Case
     * @param {string} id
     * @param {UpdatePostBundleRequest} updatePostBundleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePostBundleCase(id: string, updatePostBundleRequest: UpdatePostBundleRequest, options?: any): AxiosPromise<SingleResponsePostBundleCase>;
};
/**
 * CaseManagementApi - object-oriented interface
 * @export
 * @class CaseManagementApi
 * @extends {BaseAPI}
 */
export declare class CaseManagementApi extends BaseAPI {
    /**
     *
     * @summary Get Case Management List
     * @param {CaseType} caseType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseManagementApi
     */
    getCaseManagementList(caseType: CaseType, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListResponseCaseManagementOverview, any>>;
    /**
     *
     * @summary Get Post Bundle Case By Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseManagementApi
     */
    getPostBundleCaseById(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleResponsePostBundleCase, any>>;
    /**
     *
     * @summary Get Verify Workspace Case By Id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseManagementApi
     */
    getVerifyWorkspaceCaseById(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleResponseVerifyWorkspaceCase, any>>;
    /**
     *
     * @summary Handle Post Bundle Case
     * @param {string} id
     * @param {UpdatePostBundleRequest} updatePostBundleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseManagementApi
     */
    handlePostBundleCase(id: string, updatePostBundleRequest: UpdatePostBundleRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleResponsePostBundleCase, any>>;
    /**
     *
     * @summary Handle Verify Workspace Case
     * @param {string} id
     * @param {UpdateVerifyWorkspaceRequest} updateVerifyWorkspaceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseManagementApi
     */
    handleVerifyWorkspaceCase(id: string, updateVerifyWorkspaceRequest: UpdateVerifyWorkspaceRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleResponseVerifyWorkspaceCase, any>>;
    /**
     *
     * @summary Update Post Bundle Case
     * @param {string} id
     * @param {UpdatePostBundleRequest} updatePostBundleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaseManagementApi
     */
    updatePostBundleCase(id: string, updatePostBundleRequest: UpdatePostBundleRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleResponsePostBundleCase, any>>;
}
/**
 * DealerSupportHubApi - axios parameter creator
 * @export
 */
export declare const DealerSupportHubApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Dealer Support Hub By Id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDealerSupportHubById: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Dealer Support Hub List
     * @param {DealerCase} [_case]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDealerSupportHubList: (_case?: DealerCase, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Handle Dealer Support Hub
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleDealerSupportHub: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update Dealer Support Hub
     * @param {number} id
     * @param {UpdateDealerSupportHubRequest} updateDealerSupportHubRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDealerSupportHub: (id: number, updateDealerSupportHubRequest: UpdateDealerSupportHubRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DealerSupportHubApi - functional programming interface
 * @export
 */
export declare const DealerSupportHubApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Dealer Support Hub By Id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDealerSupportHubById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResponseDealerSupportHub>>;
    /**
     *
     * @summary Get Dealer Support Hub List
     * @param {DealerCase} [_case]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDealerSupportHubList(_case?: DealerCase, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponseDealerSupportHubOverview>>;
    /**
     *
     * @summary Handle Dealer Support Hub
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleDealerSupportHub(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResponseDealerSupportHub>>;
    /**
     *
     * @summary Update Dealer Support Hub
     * @param {number} id
     * @param {UpdateDealerSupportHubRequest} updateDealerSupportHubRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDealerSupportHub(id: number, updateDealerSupportHubRequest: UpdateDealerSupportHubRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResponseDealerSupportHub>>;
};
/**
 * DealerSupportHubApi - factory interface
 * @export
 */
export declare const DealerSupportHubApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get Dealer Support Hub By Id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDealerSupportHubById(id: number, options?: any): AxiosPromise<SingleResponseDealerSupportHub>;
    /**
     *
     * @summary Get Dealer Support Hub List
     * @param {DealerCase} [_case]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDealerSupportHubList(_case?: DealerCase, options?: any): AxiosPromise<ListResponseDealerSupportHubOverview>;
    /**
     *
     * @summary Handle Dealer Support Hub
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleDealerSupportHub(id: number, options?: any): AxiosPromise<SingleResponseDealerSupportHub>;
    /**
     *
     * @summary Update Dealer Support Hub
     * @param {number} id
     * @param {UpdateDealerSupportHubRequest} updateDealerSupportHubRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDealerSupportHub(id: number, updateDealerSupportHubRequest: UpdateDealerSupportHubRequest, options?: any): AxiosPromise<SingleResponseDealerSupportHub>;
};
/**
 * DealerSupportHubApi - object-oriented interface
 * @export
 * @class DealerSupportHubApi
 * @extends {BaseAPI}
 */
export declare class DealerSupportHubApi extends BaseAPI {
    /**
     *
     * @summary Get Dealer Support Hub By Id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealerSupportHubApi
     */
    getDealerSupportHubById(id: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleResponseDealerSupportHub, any>>;
    /**
     *
     * @summary Get Dealer Support Hub List
     * @param {DealerCase} [_case]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealerSupportHubApi
     */
    getDealerSupportHubList(_case?: DealerCase, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListResponseDealerSupportHubOverview, any>>;
    /**
     *
     * @summary Handle Dealer Support Hub
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealerSupportHubApi
     */
    handleDealerSupportHub(id: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleResponseDealerSupportHub, any>>;
    /**
     *
     * @summary Update Dealer Support Hub
     * @param {number} id
     * @param {UpdateDealerSupportHubRequest} updateDealerSupportHubRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealerSupportHubApi
     */
    updateDealerSupportHub(id: number, updateDealerSupportHubRequest: UpdateDealerSupportHubRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleResponseDealerSupportHub, any>>;
}
/**
 * EnumerationApi - axios parameter creator
 * @export
 */
export declare const EnumerationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Bike Shop List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBikeShopList: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Brand List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBrandList: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Part Spec List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPartSpecList: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Service Center List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServiceCenterList: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EnumerationApi - functional programming interface
 * @export
 */
export declare const EnumerationApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Bike Shop List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBikeShopList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponseBikeShop>>;
    /**
     *
     * @summary Get Brand List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBrandList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponseBrand>>;
    /**
     *
     * @summary Get Part Spec List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPartSpecList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponsePartSpec>>;
    /**
     *
     * @summary Get Service Center List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServiceCenterList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponseServiceCenter>>;
};
/**
 * EnumerationApi - factory interface
 * @export
 */
export declare const EnumerationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get Bike Shop List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBikeShopList(options?: any): AxiosPromise<ListResponseBikeShop>;
    /**
     *
     * @summary Get Brand List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBrandList(options?: any): AxiosPromise<ListResponseBrand>;
    /**
     *
     * @summary Get Part Spec List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPartSpecList(options?: any): AxiosPromise<ListResponsePartSpec>;
    /**
     *
     * @summary Get Service Center List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServiceCenterList(options?: any): AxiosPromise<ListResponseServiceCenter>;
};
/**
 * EnumerationApi - object-oriented interface
 * @export
 * @class EnumerationApi
 * @extends {BaseAPI}
 */
export declare class EnumerationApi extends BaseAPI {
    /**
     *
     * @summary Get Bike Shop List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumerationApi
     */
    getBikeShopList(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListResponseBikeShop, any>>;
    /**
     *
     * @summary Get Brand List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumerationApi
     */
    getBrandList(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListResponseBrand, any>>;
    /**
     *
     * @summary Get Part Spec List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumerationApi
     */
    getPartSpecList(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListResponsePartSpec, any>>;
    /**
     *
     * @summary Get Service Center List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumerationApi
     */
    getServiceCenterList(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListResponseServiceCenter, any>>;
}
/**
 * InstructionApi - axios parameter creator
 * @export
 */
export declare const InstructionApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * will be removed
     * @summary Get
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    get: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Instruction I18N
     * @param {LanguageCode} language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInstructionI18n: (language: LanguageCode, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * InstructionApi - functional programming interface
 * @export
 */
export declare const InstructionApiFp: (configuration?: Configuration) => {
    /**
     * will be removed
     * @summary Get
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    get(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponseInstruction>>;
    /**
     *
     * @summary Get Instruction I18N
     * @param {LanguageCode} language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInstructionI18n(language: LanguageCode, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponseInstructionI18n>>;
};
/**
 * InstructionApi - factory interface
 * @export
 */
export declare const InstructionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * will be removed
     * @summary Get
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    get(options?: any): AxiosPromise<ListResponseInstruction>;
    /**
     *
     * @summary Get Instruction I18N
     * @param {LanguageCode} language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInstructionI18n(language: LanguageCode, options?: any): AxiosPromise<ListResponseInstructionI18n>;
};
/**
 * InstructionApi - object-oriented interface
 * @export
 * @class InstructionApi
 * @extends {BaseAPI}
 */
export declare class InstructionApi extends BaseAPI {
    /**
     * will be removed
     * @summary Get
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof InstructionApi
     */
    get(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListResponseInstruction, any>>;
    /**
     *
     * @summary Get Instruction I18N
     * @param {LanguageCode} language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstructionApi
     */
    getInstructionI18n(language: LanguageCode, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListResponseInstructionI18n, any>>;
}
/**
 * PostBundleApi - axios parameter creator
 * @export
 */
export declare const PostBundleApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create Product Bike By Post Bundle Bike
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProductBikeByPostBundleBike: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Post Bundle By Dealer Support Hub By Id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostBundleByDealerSupportHubById: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Post Bundle By Verify Code
     * @param {string} verifyCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostBundleByVerifyCode: (verifyCode: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Post Bundle Overview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostBundleOverview: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update Post Bundle
     * @param {number} id
     * @param {OldUpdatePostBundleRequest} oldUpdatePostBundleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePostBundle: (id: number, oldUpdatePostBundleRequest: OldUpdatePostBundleRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PostBundleApi - functional programming interface
 * @export
 */
export declare const PostBundleApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create Product Bike By Post Bundle Bike
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProductBikeByPostBundleBike(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get Post Bundle By Dealer Support Hub By Id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostBundleByDealerSupportHubById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResponsePostBundle>>;
    /**
     *
     * @summary Get Post Bundle By Verify Code
     * @param {string} verifyCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostBundleByVerifyCode(verifyCode: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResponsePostBundle>>;
    /**
     *
     * @summary Get Post Bundle Overview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostBundleOverview(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponsePostBundleOverview>>;
    /**
     *
     * @summary Update Post Bundle
     * @param {number} id
     * @param {OldUpdatePostBundleRequest} oldUpdatePostBundleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePostBundle(id: number, oldUpdatePostBundleRequest: OldUpdatePostBundleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleResponsePostBundle>>;
};
/**
 * PostBundleApi - factory interface
 * @export
 */
export declare const PostBundleApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create Product Bike By Post Bundle Bike
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProductBikeByPostBundleBike(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Get Post Bundle By Dealer Support Hub By Id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostBundleByDealerSupportHubById(id: number, options?: any): AxiosPromise<SingleResponsePostBundle>;
    /**
     *
     * @summary Get Post Bundle By Verify Code
     * @param {string} verifyCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostBundleByVerifyCode(verifyCode: string, options?: any): AxiosPromise<SingleResponsePostBundle>;
    /**
     *
     * @summary Get Post Bundle Overview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostBundleOverview(options?: any): AxiosPromise<ListResponsePostBundleOverview>;
    /**
     *
     * @summary Update Post Bundle
     * @param {number} id
     * @param {OldUpdatePostBundleRequest} oldUpdatePostBundleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePostBundle(id: number, oldUpdatePostBundleRequest: OldUpdatePostBundleRequest, options?: any): AxiosPromise<SingleResponsePostBundle>;
};
/**
 * PostBundleApi - object-oriented interface
 * @export
 * @class PostBundleApi
 * @extends {BaseAPI}
 */
export declare class PostBundleApi extends BaseAPI {
    /**
     *
     * @summary Create Product Bike By Post Bundle Bike
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostBundleApi
     */
    createProductBikeByPostBundleBike(id: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get Post Bundle By Dealer Support Hub By Id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostBundleApi
     */
    getPostBundleByDealerSupportHubById(id: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleResponsePostBundle, any>>;
    /**
     *
     * @summary Get Post Bundle By Verify Code
     * @param {string} verifyCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostBundleApi
     */
    getPostBundleByVerifyCode(verifyCode: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleResponsePostBundle, any>>;
    /**
     *
     * @summary Get Post Bundle Overview
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostBundleApi
     */
    getPostBundleOverview(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListResponsePostBundleOverview, any>>;
    /**
     *
     * @summary Update Post Bundle
     * @param {number} id
     * @param {OldUpdatePostBundleRequest} oldUpdatePostBundleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostBundleApi
     */
    updatePostBundle(id: number, oldUpdatePostBundleRequest: OldUpdatePostBundleRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SingleResponsePostBundle, any>>;
}
/**
 * ZendeskApi - axios parameter creator
 * @export
 */
export declare const ZendeskApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Category List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategoryList: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Query Articles By Category
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryArticlesByCategory: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ZendeskApi - functional programming interface
 * @export
 */
export declare const ZendeskApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Category List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategoryList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponseZendeskCategory>>;
    /**
     *
     * @summary Query Articles By Category
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryArticlesByCategory(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponseZendeskArticle>>;
};
/**
 * ZendeskApi - factory interface
 * @export
 */
export declare const ZendeskApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get Category List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategoryList(options?: any): AxiosPromise<ListResponseZendeskCategory>;
    /**
     *
     * @summary Query Articles By Category
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryArticlesByCategory(id: number, options?: any): AxiosPromise<ListResponseZendeskArticle>;
};
/**
 * ZendeskApi - object-oriented interface
 * @export
 * @class ZendeskApi
 * @extends {BaseAPI}
 */
export declare class ZendeskApi extends BaseAPI {
    /**
     *
     * @summary Get Category List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZendeskApi
     */
    getCategoryList(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListResponseZendeskCategory, any>>;
    /**
     *
     * @summary Query Articles By Category
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZendeskApi
     */
    queryArticlesByCategory(id: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListResponseZendeskArticle, any>>;
}
